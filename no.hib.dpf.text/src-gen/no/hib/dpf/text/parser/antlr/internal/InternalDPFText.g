/*
 * generated by Xtext
 */
grammar InternalDPFText;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package no.hib.dpf.text.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package no.hib.dpf.text.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import no.hib.dpf.text.services.DPFTextGrammarAccess;

}

@parser::members {

 	private DPFTextGrammarAccess grammarAccess;
 	
    public InternalDPFTextParser(TokenStream input, DPFTextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DPFTextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelAccess().getSpecificationParserRuleCall_0()); 
    }
    this_Specification_0=ruleSpecification
    { 
        $current = $this_Specification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getSignatureParserRuleCall_1()); 
    }
    this_Signature_1=ruleSignature
    { 
        $current = $this_Signature_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelAccess().getBatchParserRuleCall_2()); 
    }
    this_Batch_2=ruleBatch
    { 
        $current = $this_Batch_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBatch
entryRuleBatch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBatchRule()); }
	 iv_ruleBatch=ruleBatch 
	 { $current=$iv_ruleBatch.current; } 
	 EOF 
;

// Rule Batch
ruleBatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Batch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBatchAccess().getBatchKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBatchAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBatchAccess().getCommandsCommandParserRuleCall_2_0_0()); 
	    }
		lv_commands_2_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBatchAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBatchAccess().getCommandsCommandParserRuleCall_2_1_1_0()); 
	    }
		lv_commands_4_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_4_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBatchAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeEmfParserRuleCall_0()); 
    }
    this_MakeEmf_0=ruleMakeEmf
    { 
        $current = $this_MakeEmf_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeEcoreParserRuleCall_1()); 
    }
    this_MakeEcore_1=ruleMakeEcore
    { 
        $current = $this_MakeEcore_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeImageParserRuleCall_2()); 
    }
    this_MakeImage_2=ruleMakeImage
    { 
        $current = $this_MakeImage_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMakeDiagramParserRuleCall_3()); 
    }
    this_MakeDiagram_3=ruleMakeDiagram
    { 
        $current = $this_MakeDiagram_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getTestMatchParserRuleCall_4()); 
    }
    this_TestMatch_4=ruleTestMatch
    { 
        $current = $this_TestMatch_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMakeEmf
entryRuleMakeEmf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeEmfRule()); }
	 iv_ruleMakeEmf=ruleMakeEmf 
	 { $current=$iv_ruleMakeEmf.current; } 
	 EOF 
;

// Rule MakeEmf
ruleMakeEmf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='emf' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeEmfAccess().getEmfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMakeEmfAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getMakeEmfAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeEmfRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMakeEmfAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMakeEcore
entryRuleMakeEcore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeEcoreRule()); }
	 iv_ruleMakeEcore=ruleMakeEcore 
	 { $current=$iv_ruleMakeEcore.current; } 
	 EOF 
;

// Rule MakeEcore
ruleMakeEcore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ecore' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeEcoreAccess().getEcoreKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMakeEcoreAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getMakeEcoreAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeEcoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMakeEcoreAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMakeImage
entryRuleMakeImage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeImageRule()); }
	 iv_ruleMakeImage=ruleMakeImage 
	 { $current=$iv_ruleMakeImage.current; } 
	 EOF 
;

// Rule MakeImage
ruleMakeImage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='image' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeImageAccess().getImageKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMakeImageAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getMakeImageAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeImageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMakeImageAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMakeImageAccess().getTypeGraphvizOutputEnumRuleCall_3_1_0()); 
	    }
		lv_type_4_0=ruleGraphvizOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMakeImageRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"GraphvizOutput");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMakeImageAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMakeDiagram
entryRuleMakeDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMakeDiagramRule()); }
	 iv_ruleMakeDiagram=ruleMakeDiagram 
	 { $current=$iv_ruleMakeDiagram.current; } 
	 EOF 
;

// Rule MakeDiagram
ruleMakeDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='diagram' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMakeDiagramAccess().getDiagramKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMakeDiagramAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_id_2_0=RULE_ID
		{
			newLeafNode(lv_id_2_0, grammarAccess.getMakeDiagramAccess().getIdIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMakeDiagramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMakeDiagramAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMakeDiagramAccess().getTypeGraphvizOutputEnumRuleCall_3_1_0()); 
	    }
		lv_type_4_0=ruleGraphvizOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMakeDiagramRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"GraphvizOutput");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMakeDiagramAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleTestMatch
entryRuleTestMatch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestMatchRule()); }
	 iv_ruleTestMatch=ruleTestMatch 
	 { $current=$iv_ruleTestMatch.current; } 
	 EOF 
;

// Rule TestMatch
ruleTestMatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='testMatch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestMatchAccess().getTestMatchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestMatchAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_search_2_0=RULE_ID
		{
			newLeafNode(lv_search_2_0, grammarAccess.getTestMatchAccess().getSearchIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestMatchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"search",
        		lv_search_2_0, 
        		"ID");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTestMatchAccess().getCommaKeyword_3());
    }
(
(
		lv_into_4_0=RULE_ID
		{
			newLeafNode(lv_into_4_0, grammarAccess.getTestMatchAccess().getIntoIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestMatchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"into",
        		lv_into_4_0, 
        		"ID");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTestMatchAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Specification' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpecificationAccess().getSpecificationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getVersionVersionParserRuleCall_1_0()); 
	    }
		lv_version_1_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_1_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSpecificationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getTypeChoosenSpecificationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleChoosenSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ChoosenSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_output_4_0=	'<PLAIN>' 
    {
        newLeafNode(lv_output_4_0, grammarAccess.getSpecificationAccess().getOutputPLAINKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecificationRule());
	        }
       		setWithLastConsumed($current, "output", lv_output_4_0, "<PLAIN>");
	    }

)
)?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSpecificationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getGraphGraphParserRuleCall_6_0()); 
	    }
		lv_graph_6_0=ruleGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		set(
       			$current, 
       			"graph",
        		lv_graph_6_0, 
        		"Graph");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getAtomicConstraintsConstraintListParserRuleCall_7_0()); 
	    }
		lv_atomicConstraints_7_0=ruleConstraintList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"atomicConstraints",
        		lv_atomicConstraints_7_0, 
        		"ConstraintList");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSpecificationAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleConstraintList
entryRuleConstraintList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintListRule()); }
	 iv_ruleConstraintList=ruleConstraintList 
	 { $current=$iv_ruleConstraintList.current; } 
	 EOF 
;

// Rule ConstraintList
ruleConstraintList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Constraints' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraintListAccess().getConstraintsKeyword_0());
    }
	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintListAccess().getExclamationMarkKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintListAccess().getConstraintSemanticChoosenSignatureParserRuleCall_2_0()); 
	    }
		lv_constraintSemantic_2_0=ruleChoosenSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintListRule());
	        }
       		set(
       			$current, 
       			"constraintSemantic",
        		lv_constraintSemantic_2_0, 
        		"ChoosenSignature");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintListAccess().getLeftCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintListAccess().getConstraintsConstraintParserRuleCall_4_0_0()); 
	    }
		lv_constraints_4_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintListRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_4_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintListAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintListAccess().getConstraintsConstraintParserRuleCall_4_1_1_0()); 
	    }
		lv_constraints_6_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintListRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_6_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConstraintListAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleChoosenSpecification
entryRuleChoosenSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoosenSpecificationRule()); }
	 iv_ruleChoosenSpecification=ruleChoosenSpecification 
	 { $current=$iv_ruleChoosenSpecification.current; } 
	 EOF 
;

// Rule ChoosenSpecification
ruleChoosenSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getChoosenSpecificationAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1='<version=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoosenSpecificationAccess().getVersionKeyword_1());
    }
(
(
		lv_versionName_2_0=RULE_STRING
		{
			newLeafNode(lv_versionName_2_0, grammarAccess.getChoosenSpecificationAccess().getVersionNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"versionName",
        		lv_versionName_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChoosenSpecificationAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current; } 
	 EOF 
;

// Rule Version
ruleVersion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<version=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVersionAccess().getVersionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVersionAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVersionAccess().getCommaKeyword_2());
    }
(
(
		lv_number_3_0=RULE_INT
		{
			newLeafNode(lv_number_3_0, grammarAccess.getVersionAccess().getNumberINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVersionAccess().getCommaKeyword_4());
    }
(
(
		lv_nextNumber_5_0=RULE_INT
		{
			newLeafNode(lv_nextNumber_5_0, grammarAccess.getVersionAccess().getNextNumberINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nextNumber",
        		lv_nextNumber_5_0, 
        		"INT");
	    }

)
)	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVersionAccess().getGreaterThanSignKeyword_6());
    }
)
;





// Entry rule entryRuleChoosenSignature
entryRuleChoosenSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoosenSignatureRule()); }
	 iv_ruleChoosenSignature=ruleChoosenSignature 
	 { $current=$iv_ruleChoosenSignature.current; } 
	 EOF 
;

// Rule ChoosenSignature
ruleChoosenSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getChoosenSignatureAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenSignatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)	otherlv_1='<version=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoosenSignatureAccess().getVersionKeyword_1());
    }
(
(
		lv_versionName_2_0=RULE_STRING
		{
			newLeafNode(lv_versionName_2_0, grammarAccess.getChoosenSignatureAccess().getVersionNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoosenSignatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"versionName",
        		lv_versionName_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChoosenSignatureAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getTypeDpfIdParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_parameter_2_0=RULE_STRING
		{
			newLeafNode(lv_parameter_2_0, grammarAccess.getConstraintAccess().getParameterSTRINGTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintAccess().getCommaKeyword_2_1_0());
    }
(
(
		lv_parameter_4_0=RULE_STRING
		{
			newLeafNode(lv_parameter_4_0, grammarAccess.getConstraintAccess().getParameterSTRINGTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"STRING");
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getArity_dArrowParserRuleCall_5_0_0_0()); 
	    }
		lv_arity_d_7_1=ruleArrow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		add(
       			$current, 
       			"arity_d",
        		lv_arity_d_7_1, 
        		"Arrow");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getArity_dNodeSimpleParserRuleCall_5_0_0_1()); 
	    }
		lv_arity_d_7_2=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		add(
       			$current, 
       			"arity_d",
        		lv_arity_d_7_2, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConstraintAccess().getCommaKeyword_5_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getArity_dArrowParserRuleCall_5_1_1_0_0()); 
	    }
		lv_arity_d_9_1=ruleArrow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		add(
       			$current, 
       			"arity_d",
        		lv_arity_d_9_1, 
        		"Arrow");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getArity_dNodeSimpleParserRuleCall_5_1_1_0_1()); 
	    }
		lv_arity_d_9_2=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		add(
       			$current, 
       			"arity_d",
        		lv_arity_d_9_2, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleSignature
entryRuleSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	 iv_ruleSignature=ruleSignature 
	 { $current=$iv_ruleSignature.current; } 
	 EOF 
;

// Rule Signature
ruleSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Signature' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignatureAccess().getSignatureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getVersionVersionParserRuleCall_1_0()); 
	    }
		lv_version_1_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_1_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignatureAccess().getLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getInputConstraintLanguageEnumRuleCall_2_1_0()); 
	    }
		lv_input_3_0=ruleConstraintLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_3_0, 
        		"ConstraintLanguage");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignatureAccess().getGreaterThanSignKeyword_2_2());
    }
)?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSignatureAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getValidatorsValidatorParserRuleCall_4_0()); 
	    }
		lv_validators_6_0=ruleValidator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"validators",
        		lv_validators_6_0, 
        		"Validator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSignatureAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getValidatorsValidatorParserRuleCall_5_1_0()); 
	    }
		lv_validators_8_0=ruleValidator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"validators",
        		lv_validators_8_0, 
        		"Validator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSignatureAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleValidator
entryRuleValidator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidatorRule()); }
	 iv_ruleValidator=ruleValidator 
	 { $current=$iv_ruleValidator.current; } 
	 EOF 
;

// Rule Validator
ruleValidator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValidatorAccess().getIdDpfIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidatorRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValidatorAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_parameter_vars_2_0=RULE_ID
		{
			newLeafNode(lv_parameter_vars_2_0, grammarAccess.getValidatorAccess().getParameter_varsIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameter_vars",
        		lv_parameter_vars_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValidatorAccess().getCommaKeyword_2_1_0());
    }
(
(
		lv_parameter_vars_4_0=RULE_ID
		{
			newLeafNode(lv_parameter_vars_4_0, grammarAccess.getValidatorAccess().getParameter_varsIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameter_vars",
        		lv_parameter_vars_4_0, 
        		"ID");
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getValidatorAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getValidatorAccess().getLeftCurlyBracketKeyword_4());
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getValidatorAccess().getArityArrowParserRuleCall_5_0_0_0()); 
	    }
		lv_arity_7_1=ruleArrow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidatorRule());
	        }
       		add(
       			$current, 
       			"arity",
        		lv_arity_7_1, 
        		"Arrow");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getValidatorAccess().getArityNodeSimpleParserRuleCall_5_0_0_1()); 
	    }
		lv_arity_7_2=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidatorRule());
	        }
       		add(
       			$current, 
       			"arity",
        		lv_arity_7_2, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getValidatorAccess().getCommaKeyword_5_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getValidatorAccess().getArityArrowParserRuleCall_5_1_1_0_0()); 
	    }
		lv_arity_9_1=ruleArrow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidatorRule());
	        }
       		add(
       			$current, 
       			"arity",
        		lv_arity_9_1, 
        		"Arrow");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getValidatorAccess().getArityNodeSimpleParserRuleCall_5_1_1_0_1()); 
	    }
		lv_arity_9_2=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidatorRule());
	        }
       		add(
       			$current, 
       			"arity",
        		lv_arity_9_2, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getValidatorAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getValidatorAccess().getEqualsSignKeyword_7());
    }
(
(
		lv_ocl_12_0=RULE_STRING
		{
			newLeafNode(lv_ocl_12_0, grammarAccess.getValidatorAccess().getOclSTRINGTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ocl",
        		lv_ocl_12_0, 
        		"STRING");
	    }

)
)	otherlv_13='errorMsg=' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getValidatorAccess().getErrorMsgKeyword_9());
    }
(
(
		lv_errorMsg_14_0=RULE_STRING
		{
			newLeafNode(lv_errorMsg_14_0, grammarAccess.getValidatorAccess().getErrorMsgSTRINGTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValidatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"errorMsg",
        		lv_errorMsg_14_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	 iv_ruleGraph=ruleGraph 
	 { $current=$iv_ruleGraph.current; } 
	 EOF 
;

// Rule Graph
ruleGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Graph' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGraphAccess().getGraphKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getGraphAccess().getElementsElementParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGraphAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphAccess().getElementsElementParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getNodeParserRuleCall_0()); 
    }
    this_Node_0=ruleNode
    { 
        $current = $this_Node_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getArrowParserRuleCall_1()); 
    }
    this_Arrow_1=ruleArrow
    { 
        $current = $this_Arrow_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	 iv_ruleArrow=ruleArrow 
	 { $current=$iv_ruleArrow.current; } 
	 EOF 
;

// Rule Arrow
ruleArrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeSimpleParserRuleCall_0_0_0()); 
	    }
		lv_sr_0_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_0_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrowAccess().getHyphenMinusKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getIdDpfIdParserRuleCall_0_2_0()); 
	    }
		lv_id_2_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':*->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrowAccess().getColonAsteriskHyphenMinusGreaterThanSignKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgDataTypeDataTypeEnumRuleCall_0_4_0()); 
	    }
		lv_tgDataType_4_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgDataType",
        		lv_tgDataType_4_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeSimpleParserRuleCall_1_0_0()); 
	    }
		lv_sr_5_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_5_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='-' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrowAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getIdDpfIdParserRuleCall_1_2_0()); 
	    }
		lv_id_7_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_7_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArrowAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTypeDpfIdParserRuleCall_1_4_0()); 
	    }
		lv_type_9_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_9_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='->' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgValueAttributeValueParserRuleCall_1_6_0()); 
	    }
		lv_tgValue_11_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgValue",
        		lv_tgValue_11_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeSimpleParserRuleCall_2_0_0()); 
	    }
		lv_sr_12_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_12_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13='-' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getArrowAccess().getHyphenMinusKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getIdDpfIdParserRuleCall_2_2_0()); 
	    }
		lv_id_14_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_14_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=':' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getArrowAccess().getColonKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTypeDpfIdParserRuleCall_2_4_0()); 
	    }
		lv_type_16_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_16_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='->' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_2_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgNodeNodeSimpleParserRuleCall_2_6_0()); 
	    }
		lv_tgNode_18_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgNode",
        		lv_tgNode_18_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getSrNodeSimpleParserRuleCall_3_0_0()); 
	    }
		lv_sr_19_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"sr",
        		lv_sr_19_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20='-|>' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getArrowAccess().getHyphenMinusVerticalLineGreaterThanSignKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getTgNodeNodeSimpleParserRuleCall_3_2_0()); 
	    }
		lv_tgNode_21_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"tgNode",
        		lv_tgNode_21_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getIdDpfIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getTypeDpfIdParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='extends' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodeAccess().getExtendsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getInhNodeSimpleParserRuleCall_3_1_0()); 
	    }
		lv_inh_4_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"inh",
        		lv_inh_4_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='and' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNodeAccess().getAndKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getInhNodeSimpleParserRuleCall_3_2_1_0()); 
	    }
		lv_inh_6_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"inh",
        		lv_inh_6_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_4_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getPropertiesPropertyParserRuleCall_4_1_0_0()); 
	    }
		lv_properties_8_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_8_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNodeAccess().getCommaKeyword_4_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getPropertiesPropertyParserRuleCall_4_1_1_1_0()); 
	    }
		lv_properties_10_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_10_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_4_2());
    }
)?)
;





// Entry rule entryRuleNodeSimple
entryRuleNodeSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeSimpleRule()); }
	 iv_ruleNodeSimple=ruleNodeSimple 
	 { $current=$iv_ruleNodeSimple.current; } 
	 EOF 
;

// Rule NodeSimple
ruleNodeSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNodeSimpleAccess().getIdDpfIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeSimpleRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeSimpleAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeSimpleAccess().getTypeDpfIdParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeSimpleRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getIdDpfIdParserRuleCall_0_0_0()); 
	    }
		lv_id_0_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':*->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getColonAsteriskHyphenMinusGreaterThanSignKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTgDataTypeDataTypeEnumRuleCall_0_2_0()); 
	    }
		lv_tgDataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"tgDataType",
        		lv_tgDataType_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getIdDpfIdParserRuleCall_1_0_0()); 
	    }
		lv_id_3_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_3_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeDpfIdParserRuleCall_1_2_0()); 
	    }
		lv_type_5_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPropertyAccess().getHyphenMinusGreaterThanSignKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTgValueAttributeValueParserRuleCall_1_4_0()); 
	    }
		lv_tgValue_7_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"tgValue",
        		lv_tgValue_7_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getIdDpfIdParserRuleCall_2_0_0()); 
	    }
		lv_id_8_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_8_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPropertyAccess().getColonKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeDpfIdParserRuleCall_2_2_0()); 
	    }
		lv_type_10_0=ruleDpfId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_10_0, 
        		"DpfId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='->' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPropertyAccess().getHyphenMinusGreaterThanSignKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTgNodeNodeSimpleParserRuleCall_2_4_0()); 
	    }
		lv_tgNode_12_0=ruleNodeSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"tgNode",
        		lv_tgNode_12_0, 
        		"NodeSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getAttributeValueAccess().getValueSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_variableId_1_0=RULE_ID
		{
			newLeafNode(lv_variableId_1_0, grammarAccess.getAttributeValueAccess().getVariableIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variableId",
        		lv_variableId_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDpfId
entryRuleDpfId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDpfIdRule()); }
	 iv_ruleDpfId=ruleDpfId 
	 { $current=$iv_ruleDpfId.current; } 
	 EOF 
;

// Rule DpfId
ruleDpfId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDpfIdAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDpfIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDpfIdAccess().getCommercialAtKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDpfIdAccess().getIdRIdParserRuleCall_1_1_0()); 
	    }
		lv_id_2_0=ruleRId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDpfIdRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"RId");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRId
entryRuleRId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRIdRule()); }
	 iv_ruleRId=ruleRId 
	 { $current=$iv_ruleRId.current; } 
	 EOF 
;

// Rule RId
ruleRId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_nums_0_0=RULE_INT
		{
			newLeafNode(lv_nums_0_0, grammarAccess.getRIdAccess().getNumsINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRIdRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"nums",
        		lv_nums_0_0, 
        		"INT");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRIdAccess().getCommaKeyword_1_0());
    }
(
(
		lv_nums_2_0=RULE_INT
		{
			newLeafNode(lv_nums_2_0, grammarAccess.getRIdAccess().getNumsINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRIdRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"nums",
        		lv_nums_2_0, 
        		"INT");
	    }

)
))*)
;





// Rule DataType
ruleDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Boolean' 
	{
        $current = grammarAccess.getDataTypeAccess().getTBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getTBOOLEANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Char' 
	{
        $current = grammarAccess.getDataTypeAccess().getTCHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getTCHAREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Byte' 
	{
        $current = grammarAccess.getDataTypeAccess().getTBYTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getTBYTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Short' 
	{
        $current = grammarAccess.getDataTypeAccess().getTSHORTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getTSHORTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Int' 
	{
        $current = grammarAccess.getDataTypeAccess().getTINTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getTINTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Long' 
	{
        $current = grammarAccess.getDataTypeAccess().getTLONGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getDataTypeAccess().getTLONGEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Float' 
	{
        $current = grammarAccess.getDataTypeAccess().getTFLOATEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getDataTypeAccess().getTFLOATEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Double' 
	{
        $current = grammarAccess.getDataTypeAccess().getTDOUBLEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getDataTypeAccess().getTDOUBLEEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='String' 
	{
        $current = grammarAccess.getDataTypeAccess().getTSTRINGEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getDataTypeAccess().getTSTRINGEnumLiteralDeclaration_8()); 
    }
));



// Rule GraphvizOutput
ruleGraphvizOutput returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='jpg' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getJPGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGraphvizOutputAccess().getJPGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bmp' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getBMPEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGraphvizOutputAccess().getBMPEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='canon' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getCANONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGraphvizOutputAccess().getCANONEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='dot' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getDOTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getGraphvizOutputAccess().getDOTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='xdot' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getXDOTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getGraphvizOutputAccess().getXDOTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='cmap' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getCMAPEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getGraphvizOutputAccess().getCMAPEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='eps' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getEPSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getGraphvizOutputAccess().getEPSEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='fig' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getFIGEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getGraphvizOutputAccess().getFIGEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='gd' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getGDEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getGraphvizOutputAccess().getGDEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='gd2' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getGD2EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getGraphvizOutputAccess().getGD2EnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='gif' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getGIFEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getGraphvizOutputAccess().getGIFEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='gtk' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getGTKEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getGraphvizOutputAccess().getGTKEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='ico' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getICOEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getGraphvizOutputAccess().getICOEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='imap' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getIMAPEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getGraphvizOutputAccess().getIMAPEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='cmapx' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getCMAPXEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getGraphvizOutputAccess().getCMAPXEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='imap_np' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getIMAP_NPEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getGraphvizOutputAccess().getIMAP_NPEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='cmapx_np' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getCMAP_NPEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getGraphvizOutputAccess().getCMAP_NPEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='ismap' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getISMAPEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getGraphvizOutputAccess().getISMAPEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='jpeg' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getJPEGEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getGraphvizOutputAccess().getJPEGEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='jpe' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getJPEEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getGraphvizOutputAccess().getJPEEnumLiteralDeclaration_19()); 
    }
)
    |(	enumLiteral_20='pdf' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getPDFEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getGraphvizOutputAccess().getPDFEnumLiteralDeclaration_20()); 
    }
)
    |(	enumLiteral_21='plain' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getPLAINEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getGraphvizOutputAccess().getPLAINEnumLiteralDeclaration_21()); 
    }
)
    |(	enumLiteral_22='plain-ext' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getPLAIN_EXTEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getGraphvizOutputAccess().getPLAIN_EXTEnumLiteralDeclaration_22()); 
    }
)
    |(	enumLiteral_23='png' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getPNGEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_23, grammarAccess.getGraphvizOutputAccess().getPNGEnumLiteralDeclaration_23()); 
    }
)
    |(	enumLiteral_24='ps' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getPSEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_24, grammarAccess.getGraphvizOutputAccess().getPSEnumLiteralDeclaration_24()); 
    }
)
    |(	enumLiteral_25='ps2' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getPS2EnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_25, grammarAccess.getGraphvizOutputAccess().getPS2EnumLiteralDeclaration_25()); 
    }
)
    |(	enumLiteral_26='svg' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getSVGEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_26, grammarAccess.getGraphvizOutputAccess().getSVGEnumLiteralDeclaration_26()); 
    }
)
    |(	enumLiteral_27='svgz' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getSVGZEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_27, grammarAccess.getGraphvizOutputAccess().getSVGZEnumLiteralDeclaration_27()); 
    }
)
    |(	enumLiteral_28='tif' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getTIFEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_28, grammarAccess.getGraphvizOutputAccess().getTIFEnumLiteralDeclaration_28()); 
    }
)
    |(	enumLiteral_29='tiff' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getTIFFEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_29, grammarAccess.getGraphvizOutputAccess().getTIFFEnumLiteralDeclaration_29()); 
    }
)
    |(	enumLiteral_30='vml' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getVMLEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_30, grammarAccess.getGraphvizOutputAccess().getVMLEnumLiteralDeclaration_30()); 
    }
)
    |(	enumLiteral_31='vmlz' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getVMLZEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_31, grammarAccess.getGraphvizOutputAccess().getVMLZEnumLiteralDeclaration_31()); 
    }
)
    |(	enumLiteral_32='vrml' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getVRMLEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_32, grammarAccess.getGraphvizOutputAccess().getVRMLEnumLiteralDeclaration_32()); 
    }
)
    |(	enumLiteral_33='wbmp' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getWBMPEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_33, grammarAccess.getGraphvizOutputAccess().getWBMPEnumLiteralDeclaration_33()); 
    }
)
    |(	enumLiteral_34='webp' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getWEBPEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_34, grammarAccess.getGraphvizOutputAccess().getWEBPEnumLiteralDeclaration_34()); 
    }
)
    |(	enumLiteral_35='xlib' 
	{
        $current = grammarAccess.getGraphvizOutputAccess().getXLIBEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_35, grammarAccess.getGraphvizOutputAccess().getXLIBEnumLiteralDeclaration_35()); 
    }
));



// Rule ConstraintLanguage
ruleConstraintLanguage returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='OCL' 
	{
        $current = grammarAccess.getConstraintLanguageAccess().getOCLEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConstraintLanguageAccess().getOCLEnumLiteralDeclaration()); 
    }
);



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


