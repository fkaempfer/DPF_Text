/*
 * generated by Xtext
 */
package no.hib.dpf.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DPFTextGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBatchParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Program:                                                                                                                                                                                                           
		//Model:
		//	Specification | Signature | Batch;
		@Override public ParserRule getRule() { return rule; }

		//Specification | Signature | Batch
		public Alternatives getAlternatives() { return cAlternatives; }

		//Specification
		public RuleCall getSpecificationParserRuleCall_0() { return cSpecificationParserRuleCall_0; }

		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }

		//Batch
		public RuleCall getBatchParserRuleCall_2() { return cBatchParserRuleCall_2; }
	}

	public class BatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Batch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCommandsCommandParserRuleCall_2_0_0 = (RuleCall)cCommandsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCommandsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_2_1_1_0 = (RuleCall)cCommandsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		////Batch jobs:
		////
		//Batch:
		//	"Batch" "{" (commands+=Command ("," commands+=Command)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"Batch" "{" (commands+=Command ("," commands+=Command)*)? "}"
		public Group getGroup() { return cGroup; }

		//"Batch"
		public Keyword getBatchKeyword_0() { return cBatchKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(commands+=Command ("," commands+=Command)*)?
		public Group getGroup_2() { return cGroup_2; }

		//commands+=Command
		public Assignment getCommandsAssignment_2_0() { return cCommandsAssignment_2_0; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0_0() { return cCommandsCommandParserRuleCall_2_0_0; }

		//("," commands+=Command)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//commands+=Command
		public Assignment getCommandsAssignment_2_1_1() { return cCommandsAssignment_2_1_1; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_1_1_0() { return cCommandsCommandParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMakeEmfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMakeEcoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMakeImageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMakeDiagramParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTestMatchParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////"Program-Parts":
		////Rule | Evolution;
		//Command:
		//	MakeEmf | MakeEcore | MakeImage | MakeDiagram | TestMatch;
		@Override public ParserRule getRule() { return rule; }

		//MakeEmf | MakeEcore | MakeImage | MakeDiagram | TestMatch
		public Alternatives getAlternatives() { return cAlternatives; }

		//MakeEmf
		public RuleCall getMakeEmfParserRuleCall_0() { return cMakeEmfParserRuleCall_0; }

		//MakeEcore
		public RuleCall getMakeEcoreParserRuleCall_1() { return cMakeEcoreParserRuleCall_1; }

		//MakeImage
		public RuleCall getMakeImageParserRuleCall_2() { return cMakeImageParserRuleCall_2; }

		//MakeDiagram
		public RuleCall getMakeDiagramParserRuleCall_3() { return cMakeDiagramParserRuleCall_3; }

		//TestMatch
		public RuleCall getTestMatchParserRuleCall_4() { return cTestMatchParserRuleCall_4; }
	}

	public class MakeEmfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeEmf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MakeEmf:
		//	"emf" "(" id=ID ")";
		@Override public ParserRule getRule() { return rule; }

		//"emf" "(" id=ID ")"
		public Group getGroup() { return cGroup; }

		//"emf"
		public Keyword getEmfKeyword_0() { return cEmfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MakeEcoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeEcore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEcoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MakeEcore:
		//	"ecore" "(" id=ID ")";
		@Override public ParserRule getRule() { return rule; }

		//"ecore" "(" id=ID ")"
		public Group getGroup() { return cGroup; }

		//"ecore"
		public Keyword getEcoreKeyword_0() { return cEcoreKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MakeImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeImage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeGraphvizOutputEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MakeImage:
		//	"image" "(" id=ID ("," type=GraphvizOutput)? ")";
		@Override public ParserRule getRule() { return rule; }

		//"image" "(" id=ID ("," type=GraphvizOutput)? ")"
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//("," type=GraphvizOutput)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//type=GraphvizOutput
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//GraphvizOutput
		public RuleCall getTypeGraphvizOutputEnumRuleCall_3_1_0() { return cTypeGraphvizOutputEnumRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MakeDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MakeDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeGraphvizOutputEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MakeDiagram:
		//	"diagram" "(" id=ID ("," type=GraphvizOutput)? ")";
		@Override public ParserRule getRule() { return rule; }

		//"diagram" "(" id=ID ("," type=GraphvizOutput)? ")"
		public Group getGroup() { return cGroup; }

		//"diagram"
		public Keyword getDiagramKeyword_0() { return cDiagramKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//("," type=GraphvizOutput)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//type=GraphvizOutput
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//GraphvizOutput
		public RuleCall getTypeGraphvizOutputEnumRuleCall_3_1_0() { return cTypeGraphvizOutputEnumRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TestMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSearchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSearchIDTerminalRuleCall_2_0 = (RuleCall)cSearchAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIntoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntoIDTerminalRuleCall_4_0 = (RuleCall)cIntoAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TestMatch:
		//	"testMatch" "(" search=ID "," into=ID ")";
		@Override public ParserRule getRule() { return rule; }

		//"testMatch" "(" search=ID "," into=ID ")"
		public Group getGroup() { return cGroup; }

		//"testMatch"
		public Keyword getTestMatchKeyword_0() { return cTestMatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//search=ID
		public Assignment getSearchAssignment_2() { return cSearchAssignment_2; }

		//ID
		public RuleCall getSearchIDTerminalRuleCall_2_0() { return cSearchIDTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//into=ID
		public Assignment getIntoAssignment_4() { return cIntoAssignment_4; }

		//ID
		public RuleCall getIntoIDTerminalRuleCall_4_0() { return cIntoIDTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionVersionParserRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeChoosenSpecificationParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOutputPLAINKeyword_4_0 = (Keyword)cOutputAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGraphAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGraphGraphParserRuleCall_6_0 = (RuleCall)cGraphAssignment_6.eContents().get(0);
		private final Assignment cAtomicConstraintsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAtomicConstraintsConstraintListParserRuleCall_7_0 = (RuleCall)cAtomicConstraintsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Evolution: 'simpleEvolution(' lhs=ID '<-' diff=ID '->' rhS=ID ',' typeGraph=ID ')'; 
		////
		////Specification:
		////
		//Specification:
		//	"Specification" version=Version ":" type=ChoosenSpecification output="<PLAIN>"? "{" graph=Graph
		//	atomicConstraints+=ConstraintList* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Specification" version=Version ":" type=ChoosenSpecification output="<PLAIN>"? "{" graph=Graph
		//atomicConstraints+=ConstraintList* "}"
		public Group getGroup() { return cGroup; }

		//"Specification"
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }

		//version=Version
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_1_0() { return cVersionVersionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=ChoosenSpecification
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ChoosenSpecification
		public RuleCall getTypeChoosenSpecificationParserRuleCall_3_0() { return cTypeChoosenSpecificationParserRuleCall_3_0; }

		//output="<PLAIN>"?
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }

		//"<PLAIN>"
		public Keyword getOutputPLAINKeyword_4_0() { return cOutputPLAINKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//graph=Graph
		public Assignment getGraphAssignment_6() { return cGraphAssignment_6; }

		//Graph
		public RuleCall getGraphGraphParserRuleCall_6_0() { return cGraphGraphParserRuleCall_6_0; }

		//atomicConstraints+=ConstraintList*
		public Assignment getAtomicConstraintsAssignment_7() { return cAtomicConstraintsAssignment_7; }

		//ConstraintList
		public RuleCall getAtomicConstraintsConstraintListParserRuleCall_7_0() { return cAtomicConstraintsConstraintListParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ConstraintListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintSemanticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintSemanticChoosenSignatureParserRuleCall_2_0 = (RuleCall)cConstraintSemanticAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cConstraintsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cConstraintsConstraintParserRuleCall_4_0_0 = (RuleCall)cConstraintsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_4_1_1_0 = (RuleCall)cConstraintsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstraintList:
		//	"Constraints" "!" constraintSemantic=ChoosenSignature "{" (constraints+=Constraint ("," constraints+=Constraint)*)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"Constraints" "!" constraintSemantic=ChoosenSignature "{" (constraints+=Constraint ("," constraints+=Constraint)*)? "}"
		public Group getGroup() { return cGroup; }

		//"Constraints"
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//constraintSemantic=ChoosenSignature
		public Assignment getConstraintSemanticAssignment_2() { return cConstraintSemanticAssignment_2; }

		//ChoosenSignature
		public RuleCall getConstraintSemanticChoosenSignatureParserRuleCall_2_0() { return cConstraintSemanticChoosenSignatureParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(constraints+=Constraint ("," constraints+=Constraint)*)?
		public Group getGroup_4() { return cGroup_4; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_4_0() { return cConstraintsAssignment_4_0; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_4_0_0() { return cConstraintsConstraintParserRuleCall_4_0_0; }

		//("," constraints+=Constraint)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_4_1_1() { return cConstraintsAssignment_4_1_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_4_1_1_0() { return cConstraintsConstraintParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ChoosenSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoosenSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVersionNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cVersionNameAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChoosenSpecification:
		//	id=ID "<version=" versionName=STRING ">";
		@Override public ParserRule getRule() { return rule; }

		//id=ID "<version=" versionName=STRING ">"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//"<version="
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }

		//versionName=STRING
		public Assignment getVersionNameAssignment_2() { return cVersionNameAssignment_2; }

		//STRING
		public RuleCall getVersionNameSTRINGTerminalRuleCall_2_0() { return cVersionNameSTRINGTerminalRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberINTTerminalRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNextNumberAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNextNumberINTTerminalRuleCall_5_0 = (RuleCall)cNextNumberAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Version:
		//	"<version=" name=STRING "," number=INT "," nextNumber=INT ">";
		@Override public ParserRule getRule() { return rule; }

		//"<version=" name=STRING "," number=INT "," nextNumber=INT ">"
		public Group getGroup() { return cGroup; }

		//"<version="
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//number=INT
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_0() { return cNumberINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//nextNumber=INT
		public Assignment getNextNumberAssignment_5() { return cNextNumberAssignment_5; }

		//INT
		public RuleCall getNextNumberINTTerminalRuleCall_5_0() { return cNextNumberINTTerminalRuleCall_5_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
	}

	public class ChoosenSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoosenSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVersionNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cVersionNameAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChoosenSignature:
		//	id=ID "<version=" versionName=STRING ">";
		@Override public ParserRule getRule() { return rule; }

		//id=ID "<version=" versionName=STRING ">"
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//"<version="
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }

		//versionName=STRING
		public Assignment getVersionNameAssignment_2() { return cVersionNameAssignment_2; }

		//STRING
		public RuleCall getVersionNameSTRINGTerminalRuleCall_2_0() { return cVersionNameSTRINGTerminalRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDpfIdParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cParameterAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArity_dAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cArity_dAlternatives_5_0_0 = (Alternatives)cArity_dAssignment_5_0.eContents().get(0);
		private final RuleCall cArity_dArrowParserRuleCall_5_0_0_0 = (RuleCall)cArity_dAlternatives_5_0_0.eContents().get(0);
		private final RuleCall cArity_dNodeSimpleParserRuleCall_5_0_0_1 = (RuleCall)cArity_dAlternatives_5_0_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArity_dAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final Alternatives cArity_dAlternatives_5_1_1_0 = (Alternatives)cArity_dAssignment_5_1_1.eContents().get(0);
		private final RuleCall cArity_dArrowParserRuleCall_5_1_1_0_0 = (RuleCall)cArity_dAlternatives_5_1_1_0.eContents().get(0);
		private final RuleCall cArity_dNodeSimpleParserRuleCall_5_1_1_0_1 = (RuleCall)cArity_dAlternatives_5_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Constraint:
		//	type=DpfId "(" (parameter+=STRING ("," parameter+=STRING)*)? ")" "{" (arity_d+=(Arrow | NodeSimple) (","
		//	arity_d+=(Arrow | NodeSimple))*) "}";
		@Override public ParserRule getRule() { return rule; }

		//type=DpfId "(" (parameter+=STRING ("," parameter+=STRING)*)? ")" "{" (arity_d+=(Arrow | NodeSimple) ("," arity_d+=(Arrow
		//| NodeSimple))*) "}"
		public Group getGroup() { return cGroup; }

		//type=DpfId
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_0_0() { return cTypeDpfIdParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameter+=STRING ("," parameter+=STRING)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameter+=STRING
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }

		//STRING
		public RuleCall getParameterSTRINGTerminalRuleCall_2_0_0() { return cParameterSTRINGTerminalRuleCall_2_0_0; }

		//("," parameter+=STRING)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameter+=STRING
		public Assignment getParameterAssignment_2_1_1() { return cParameterAssignment_2_1_1; }

		//STRING
		public RuleCall getParameterSTRINGTerminalRuleCall_2_1_1_0() { return cParameterSTRINGTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//arity_d+=(Arrow | NodeSimple) ("," arity_d+=(Arrow | NodeSimple))*
		public Group getGroup_5() { return cGroup_5; }

		//arity_d+=(Arrow | NodeSimple)
		public Assignment getArity_dAssignment_5_0() { return cArity_dAssignment_5_0; }

		//Arrow | NodeSimple
		public Alternatives getArity_dAlternatives_5_0_0() { return cArity_dAlternatives_5_0_0; }

		//Arrow
		public RuleCall getArity_dArrowParserRuleCall_5_0_0_0() { return cArity_dArrowParserRuleCall_5_0_0_0; }

		//NodeSimple
		public RuleCall getArity_dNodeSimpleParserRuleCall_5_0_0_1() { return cArity_dNodeSimpleParserRuleCall_5_0_0_1; }

		//("," arity_d+=(Arrow | NodeSimple))*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//arity_d+=(Arrow | NodeSimple)
		public Assignment getArity_dAssignment_5_1_1() { return cArity_dAssignment_5_1_1; }

		//Arrow | NodeSimple
		public Alternatives getArity_dAlternatives_5_1_1_0() { return cArity_dAlternatives_5_1_1_0; }

		//Arrow
		public RuleCall getArity_dArrowParserRuleCall_5_1_1_0_0() { return cArity_dArrowParserRuleCall_5_1_1_0_0; }

		//NodeSimple
		public RuleCall getArity_dNodeSimpleParserRuleCall_5_1_1_0_1() { return cArity_dNodeSimpleParserRuleCall_5_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionVersionParserRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInputAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInputConstraintLanguageEnumRuleCall_2_1_0 = (RuleCall)cInputAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValidatorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValidatorsValidatorParserRuleCall_4_0 = (RuleCall)cValidatorsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValidatorsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValidatorsValidatorParserRuleCall_5_1_0 = (RuleCall)cValidatorsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////
		////Signature:
		////
		//Signature:
		//	"Signature" version=Version ("<" input=ConstraintLanguage ">")? "{" validators+=Validator ("," validators+=Validator)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"Signature" version=Version ("<" input=ConstraintLanguage ">")? "{" validators+=Validator ("," validators+=Validator)*
		//"}"
		public Group getGroup() { return cGroup; }

		//"Signature"
		public Keyword getSignatureKeyword_0() { return cSignatureKeyword_0; }

		//version=Version
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_1_0() { return cVersionVersionParserRuleCall_1_0; }

		//("<" input=ConstraintLanguage ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//input=ConstraintLanguage
		public Assignment getInputAssignment_2_1() { return cInputAssignment_2_1; }

		//ConstraintLanguage
		public RuleCall getInputConstraintLanguageEnumRuleCall_2_1_0() { return cInputConstraintLanguageEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//validators+=Validator
		public Assignment getValidatorsAssignment_4() { return cValidatorsAssignment_4; }

		//Validator
		public RuleCall getValidatorsValidatorParserRuleCall_4_0() { return cValidatorsValidatorParserRuleCall_4_0; }

		//("," validators+=Validator)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//validators+=Validator
		public Assignment getValidatorsAssignment_5_1() { return cValidatorsAssignment_5_1; }

		//Validator
		public RuleCall getValidatorsValidatorParserRuleCall_5_1_0() { return cValidatorsValidatorParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameter_varsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameter_varsIDTerminalRuleCall_2_0_0 = (RuleCall)cParameter_varsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameter_varsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameter_varsIDTerminalRuleCall_2_1_1_0 = (RuleCall)cParameter_varsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArityAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Alternatives cArityAlternatives_5_0_0 = (Alternatives)cArityAssignment_5_0.eContents().get(0);
		private final RuleCall cArityArrowParserRuleCall_5_0_0_0 = (RuleCall)cArityAlternatives_5_0_0.eContents().get(0);
		private final RuleCall cArityNodeSimpleParserRuleCall_5_0_0_1 = (RuleCall)cArityAlternatives_5_0_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArityAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final Alternatives cArityAlternatives_5_1_1_0 = (Alternatives)cArityAssignment_5_1_1.eContents().get(0);
		private final RuleCall cArityArrowParserRuleCall_5_1_1_0_0 = (RuleCall)cArityAlternatives_5_1_1_0.eContents().get(0);
		private final RuleCall cArityNodeSimpleParserRuleCall_5_1_1_0_1 = (RuleCall)cArityAlternatives_5_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOclAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOclSTRINGTerminalRuleCall_8_0 = (RuleCall)cOclAssignment_8.eContents().get(0);
		private final Keyword cErrorMsgKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cErrorMsgAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cErrorMsgSTRINGTerminalRuleCall_10_0 = (RuleCall)cErrorMsgAssignment_10.eContents().get(0);
		
		//Validator:
		//	id=DpfId "(" (parameter_vars+=ID ("," parameter_vars+=ID)*)? ")" "{" (arity+=(Arrow | NodeSimple) ("," arity+=(Arrow |
		//	NodeSimple))*) "}" "=" ocl=STRING "errorMsg=" errorMsg=STRING;
		@Override public ParserRule getRule() { return rule; }

		//id=DpfId "(" (parameter_vars+=ID ("," parameter_vars+=ID)*)? ")" "{" (arity+=(Arrow | NodeSimple) ("," arity+=(Arrow |
		//NodeSimple))*) "}" "=" ocl=STRING "errorMsg=" errorMsg=STRING
		public Group getGroup() { return cGroup; }

		//id=DpfId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0() { return cIdDpfIdParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameter_vars+=ID ("," parameter_vars+=ID)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameter_vars+=ID
		public Assignment getParameter_varsAssignment_2_0() { return cParameter_varsAssignment_2_0; }

		//ID
		public RuleCall getParameter_varsIDTerminalRuleCall_2_0_0() { return cParameter_varsIDTerminalRuleCall_2_0_0; }

		//("," parameter_vars+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameter_vars+=ID
		public Assignment getParameter_varsAssignment_2_1_1() { return cParameter_varsAssignment_2_1_1; }

		//ID
		public RuleCall getParameter_varsIDTerminalRuleCall_2_1_1_0() { return cParameter_varsIDTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//arity+=(Arrow | NodeSimple) ("," arity+=(Arrow | NodeSimple))*
		public Group getGroup_5() { return cGroup_5; }

		//arity+=(Arrow | NodeSimple)
		public Assignment getArityAssignment_5_0() { return cArityAssignment_5_0; }

		//Arrow | NodeSimple
		public Alternatives getArityAlternatives_5_0_0() { return cArityAlternatives_5_0_0; }

		//Arrow
		public RuleCall getArityArrowParserRuleCall_5_0_0_0() { return cArityArrowParserRuleCall_5_0_0_0; }

		//NodeSimple
		public RuleCall getArityNodeSimpleParserRuleCall_5_0_0_1() { return cArityNodeSimpleParserRuleCall_5_0_0_1; }

		//("," arity+=(Arrow | NodeSimple))*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//arity+=(Arrow | NodeSimple)
		public Assignment getArityAssignment_5_1_1() { return cArityAssignment_5_1_1; }

		//Arrow | NodeSimple
		public Alternatives getArityAlternatives_5_1_1_0() { return cArityAlternatives_5_1_1_0; }

		//Arrow
		public RuleCall getArityArrowParserRuleCall_5_1_1_0_0() { return cArityArrowParserRuleCall_5_1_1_0_0; }

		//NodeSimple
		public RuleCall getArityNodeSimpleParserRuleCall_5_1_1_0_1() { return cArityNodeSimpleParserRuleCall_5_1_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//ocl=STRING
		public Assignment getOclAssignment_8() { return cOclAssignment_8; }

		//STRING
		public RuleCall getOclSTRINGTerminalRuleCall_8_0() { return cOclSTRINGTerminalRuleCall_8_0; }

		//"errorMsg="
		public Keyword getErrorMsgKeyword_9() { return cErrorMsgKeyword_9; }

		//errorMsg=STRING
		public Assignment getErrorMsgAssignment_10() { return cErrorMsgAssignment_10; }

		//STRING
		public RuleCall getErrorMsgSTRINGTerminalRuleCall_10_0() { return cErrorMsgSTRINGTerminalRuleCall_10_0; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		////Typed graphs:
		////
		////Warning is OK, Empty Graph is possible
		//Graph:
		//	"Graph" "{" (elements+=Element ("," elements+=Element)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"Graph" "{" (elements+=Element ("," elements+=Element)*)? "}"
		public Group getGroup() { return cGroup; }

		//"Graph"
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=Element ("," elements+=Element)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=Element
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_2_0_0() { return cElementsElementParserRuleCall_2_0_0; }

		//("," elements+=Element)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=Element
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//Element
		public RuleCall getElementsElementParserRuleCall_2_1_1_0() { return cElementsElementParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Node | Arrow;
		@Override public ParserRule getRule() { return rule; }

		//Node | Arrow
		public Alternatives getAlternatives() { return cAlternatives; }

		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }

		//Arrow
		public RuleCall getArrowParserRuleCall_1() { return cArrowParserRuleCall_1; }
	}

	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arrow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSrAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSrNodeSimpleParserRuleCall_0_0_0 = (RuleCall)cSrAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_0_2_0 = (RuleCall)cIdAssignment_0_2.eContents().get(0);
		private final Keyword cColonAsteriskHyphenMinusGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTgDataTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTgDataTypeDataTypeEnumRuleCall_0_4_0 = (RuleCall)cTgDataTypeAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSrNodeSimpleParserRuleCall_1_0_0 = (RuleCall)cSrAssignment_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_1_2_0 = (RuleCall)cIdAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTypeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTypeDpfIdParserRuleCall_1_4_0 = (RuleCall)cTypeAssignment_1_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cTgValueAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cTgValueAttributeValueParserRuleCall_1_6_0 = (RuleCall)cTgValueAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSrAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSrNodeSimpleParserRuleCall_2_0_0 = (RuleCall)cSrAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIdAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIdDpfIdParserRuleCall_2_2_0 = (RuleCall)cIdAssignment_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cTypeDpfIdParserRuleCall_2_4_0 = (RuleCall)cTypeAssignment_2_4.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cTgNodeAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cTgNodeNodeSimpleParserRuleCall_2_6_0 = (RuleCall)cTgNodeAssignment_2_6.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cSrAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSrNodeSimpleParserRuleCall_3_0_0 = (RuleCall)cSrAssignment_3_0.eContents().get(0);
		private final Keyword cHyphenMinusVerticalLineGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTgNodeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTgNodeNodeSimpleParserRuleCall_3_2_0 = (RuleCall)cTgNodeAssignment_3_2.eContents().get(0);
		
		//Arrow:
		//	sr=NodeSimple "-" id=DpfId ":*->" tgDataType=DataType | sr=NodeSimple "-" id=DpfId ":" type=DpfId "->"
		//	tgValue=AttributeValue | sr=NodeSimple "-" id=DpfId ":" type=DpfId "->" tgNode=NodeSimple | sr=NodeSimple "-|>"
		//	tgNode=NodeSimple;
		@Override public ParserRule getRule() { return rule; }

		//sr=NodeSimple "-" id=DpfId ":*->" tgDataType=DataType | sr=NodeSimple "-" id=DpfId ":" type=DpfId "->"
		//tgValue=AttributeValue | sr=NodeSimple "-" id=DpfId ":" type=DpfId "->" tgNode=NodeSimple | sr=NodeSimple "-|>"
		//tgNode=NodeSimple
		public Alternatives getAlternatives() { return cAlternatives; }

		//sr=NodeSimple "-" id=DpfId ":*->" tgDataType=DataType
		public Group getGroup_0() { return cGroup_0; }

		//sr=NodeSimple
		public Assignment getSrAssignment_0_0() { return cSrAssignment_0_0; }

		//NodeSimple
		public RuleCall getSrNodeSimpleParserRuleCall_0_0_0() { return cSrNodeSimpleParserRuleCall_0_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//id=DpfId
		public Assignment getIdAssignment_0_2() { return cIdAssignment_0_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_2_0() { return cIdDpfIdParserRuleCall_0_2_0; }

		//":*->"
		public Keyword getColonAsteriskHyphenMinusGreaterThanSignKeyword_0_3() { return cColonAsteriskHyphenMinusGreaterThanSignKeyword_0_3; }

		//tgDataType=DataType
		public Assignment getTgDataTypeAssignment_0_4() { return cTgDataTypeAssignment_0_4; }

		//DataType
		public RuleCall getTgDataTypeDataTypeEnumRuleCall_0_4_0() { return cTgDataTypeDataTypeEnumRuleCall_0_4_0; }

		//sr=NodeSimple "-" id=DpfId ":" type=DpfId "->" tgValue=AttributeValue
		public Group getGroup_1() { return cGroup_1; }

		//sr=NodeSimple
		public Assignment getSrAssignment_1_0() { return cSrAssignment_1_0; }

		//NodeSimple
		public RuleCall getSrNodeSimpleParserRuleCall_1_0_0() { return cSrNodeSimpleParserRuleCall_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//id=DpfId
		public Assignment getIdAssignment_1_2() { return cIdAssignment_1_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_1_2_0() { return cIdDpfIdParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//type=DpfId
		public Assignment getTypeAssignment_1_4() { return cTypeAssignment_1_4; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_1_4_0() { return cTypeDpfIdParserRuleCall_1_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_5() { return cHyphenMinusGreaterThanSignKeyword_1_5; }

		//tgValue=AttributeValue
		public Assignment getTgValueAssignment_1_6() { return cTgValueAssignment_1_6; }

		//AttributeValue
		public RuleCall getTgValueAttributeValueParserRuleCall_1_6_0() { return cTgValueAttributeValueParserRuleCall_1_6_0; }

		//sr=NodeSimple "-" id=DpfId ":" type=DpfId "->" tgNode=NodeSimple
		public Group getGroup_2() { return cGroup_2; }

		//sr=NodeSimple
		public Assignment getSrAssignment_2_0() { return cSrAssignment_2_0; }

		//NodeSimple
		public RuleCall getSrNodeSimpleParserRuleCall_2_0_0() { return cSrNodeSimpleParserRuleCall_2_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }

		//id=DpfId
		public Assignment getIdAssignment_2_2() { return cIdAssignment_2_2; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_2_2_0() { return cIdDpfIdParserRuleCall_2_2_0; }

		//":"
		public Keyword getColonKeyword_2_3() { return cColonKeyword_2_3; }

		//type=DpfId
		public Assignment getTypeAssignment_2_4() { return cTypeAssignment_2_4; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_2_4_0() { return cTypeDpfIdParserRuleCall_2_4_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_5() { return cHyphenMinusGreaterThanSignKeyword_2_5; }

		//tgNode=NodeSimple
		public Assignment getTgNodeAssignment_2_6() { return cTgNodeAssignment_2_6; }

		//NodeSimple
		public RuleCall getTgNodeNodeSimpleParserRuleCall_2_6_0() { return cTgNodeNodeSimpleParserRuleCall_2_6_0; }

		//sr=NodeSimple "-|>" tgNode=NodeSimple
		public Group getGroup_3() { return cGroup_3; }

		//sr=NodeSimple
		public Assignment getSrAssignment_3_0() { return cSrAssignment_3_0; }

		//NodeSimple
		public RuleCall getSrNodeSimpleParserRuleCall_3_0_0() { return cSrNodeSimpleParserRuleCall_3_0_0; }

		//"-|>"
		public Keyword getHyphenMinusVerticalLineGreaterThanSignKeyword_3_1() { return cHyphenMinusVerticalLineGreaterThanSignKeyword_3_1; }

		//tgNode=NodeSimple
		public Assignment getTgNodeAssignment_3_2() { return cTgNodeAssignment_3_2; }

		//NodeSimple
		public RuleCall getTgNodeNodeSimpleParserRuleCall_3_2_0() { return cTgNodeNodeSimpleParserRuleCall_3_2_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDpfIdParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInhAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInhNodeSimpleParserRuleCall_3_1_0 = (RuleCall)cInhAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cAndKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInhAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInhNodeSimpleParserRuleCall_3_2_1_0 = (RuleCall)cInhAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cPropertiesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_1_0_0 = (RuleCall)cPropertiesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_1_1_1_0 = (RuleCall)cPropertiesAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Node:
		//	id=DpfId ":" type=DpfId ("extends" inh+=NodeSimple ("and" inh+=NodeSimple)*)? ("{" (properties+=Property (","
		//	properties+=Property)*)? "}")?;
		@Override public ParserRule getRule() { return rule; }

		//id=DpfId ":" type=DpfId ("extends" inh+=NodeSimple ("and" inh+=NodeSimple)*)? ("{" (properties+=Property (","
		//properties+=Property)*)? "}")?
		public Group getGroup() { return cGroup; }

		//id=DpfId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0() { return cIdDpfIdParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DpfId
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_2_0() { return cTypeDpfIdParserRuleCall_2_0; }

		//("extends" inh+=NodeSimple ("and" inh+=NodeSimple)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//inh+=NodeSimple
		public Assignment getInhAssignment_3_1() { return cInhAssignment_3_1; }

		//NodeSimple
		public RuleCall getInhNodeSimpleParserRuleCall_3_1_0() { return cInhNodeSimpleParserRuleCall_3_1_0; }

		//("and" inh+=NodeSimple)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"and"
		public Keyword getAndKeyword_3_2_0() { return cAndKeyword_3_2_0; }

		//inh+=NodeSimple
		public Assignment getInhAssignment_3_2_1() { return cInhAssignment_3_2_1; }

		//NodeSimple
		public RuleCall getInhNodeSimpleParserRuleCall_3_2_1_0() { return cInhNodeSimpleParserRuleCall_3_2_1_0; }

		//("{" (properties+=Property ("," properties+=Property)*)? "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//(properties+=Property ("," properties+=Property)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//properties+=Property
		public Assignment getPropertiesAssignment_4_1_0() { return cPropertiesAssignment_4_1_0; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_1_0_0() { return cPropertiesPropertyParserRuleCall_4_1_0_0; }

		//("," properties+=Property)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_4_1_1_1() { return cPropertiesAssignment_4_1_1_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_1_1_1_0() { return cPropertiesPropertyParserRuleCall_4_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class NodeSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDpfIdParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//NodeSimple:
		//	id=DpfId ":" type=DpfId;
		@Override public ParserRule getRule() { return rule; }

		//id=DpfId ":" type=DpfId
		public Group getGroup() { return cGroup; }

		//id=DpfId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0() { return cIdDpfIdParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=DpfId
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_2_0() { return cTypeDpfIdParserRuleCall_2_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cColonAsteriskHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTgDataTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTgDataTypeDataTypeEnumRuleCall_0_2_0 = (RuleCall)cTgDataTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeDpfIdParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTgValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTgValueAttributeValueParserRuleCall_1_4_0 = (RuleCall)cTgValueAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdDpfIdParserRuleCall_2_0_0 = (RuleCall)cIdAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypeDpfIdParserRuleCall_2_2_0 = (RuleCall)cTypeAssignment_2_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTgNodeAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cTgNodeNodeSimpleParserRuleCall_2_4_0 = (RuleCall)cTgNodeAssignment_2_4.eContents().get(0);
		
		//Property:
		//	id=DpfId ":*->" tgDataType=DataType | id=DpfId ":" type=DpfId "->" tgValue=AttributeValue | id=DpfId ":" type=DpfId
		//	"->" tgNode=NodeSimple;
		@Override public ParserRule getRule() { return rule; }

		//id=DpfId ":*->" tgDataType=DataType | id=DpfId ":" type=DpfId "->" tgValue=AttributeValue | id=DpfId ":" type=DpfId "->"
		//tgNode=NodeSimple
		public Alternatives getAlternatives() { return cAlternatives; }

		//id=DpfId ":*->" tgDataType=DataType
		public Group getGroup_0() { return cGroup_0; }

		//id=DpfId
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_0_0_0() { return cIdDpfIdParserRuleCall_0_0_0; }

		//":*->"
		public Keyword getColonAsteriskHyphenMinusGreaterThanSignKeyword_0_1() { return cColonAsteriskHyphenMinusGreaterThanSignKeyword_0_1; }

		//tgDataType=DataType
		public Assignment getTgDataTypeAssignment_0_2() { return cTgDataTypeAssignment_0_2; }

		//DataType
		public RuleCall getTgDataTypeDataTypeEnumRuleCall_0_2_0() { return cTgDataTypeDataTypeEnumRuleCall_0_2_0; }

		//id=DpfId ":" type=DpfId "->" tgValue=AttributeValue
		public Group getGroup_1() { return cGroup_1; }

		//id=DpfId
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_1_0_0() { return cIdDpfIdParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type=DpfId
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_1_2_0() { return cTypeDpfIdParserRuleCall_1_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_3() { return cHyphenMinusGreaterThanSignKeyword_1_3; }

		//tgValue=AttributeValue
		public Assignment getTgValueAssignment_1_4() { return cTgValueAssignment_1_4; }

		//AttributeValue
		public RuleCall getTgValueAttributeValueParserRuleCall_1_4_0() { return cTgValueAttributeValueParserRuleCall_1_4_0; }

		//id=DpfId ":" type=DpfId "->" tgNode=NodeSimple
		public Group getGroup_2() { return cGroup_2; }

		//id=DpfId
		public Assignment getIdAssignment_2_0() { return cIdAssignment_2_0; }

		//DpfId
		public RuleCall getIdDpfIdParserRuleCall_2_0_0() { return cIdDpfIdParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//type=DpfId
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }

		//DpfId
		public RuleCall getTypeDpfIdParserRuleCall_2_2_0() { return cTypeDpfIdParserRuleCall_2_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_3() { return cHyphenMinusGreaterThanSignKeyword_2_3; }

		//tgNode=NodeSimple
		public Assignment getTgNodeAssignment_2_4() { return cTgNodeAssignment_2_4; }

		//NodeSimple
		public RuleCall getTgNodeNodeSimpleParserRuleCall_2_4_0() { return cTgNodeNodeSimpleParserRuleCall_2_4_0; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cVariableIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableIdIDTerminalRuleCall_1_0 = (RuleCall)cVariableIdAssignment_1.eContents().get(0);
		
		////Id for Variable 
		//AttributeValue:
		//	value=STRING | variableId=ID;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING | variableId=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }

		//variableId=ID
		public Assignment getVariableIdAssignment_1() { return cVariableIdAssignment_1; }

		//ID
		public RuleCall getVariableIdIDTerminalRuleCall_1_0() { return cVariableIdIDTerminalRuleCall_1_0; }
	}

	public class DpfIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DpfId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdRIdParserRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		
		//DpfId:
		//	name=ID ("@" id=RId)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("@" id=RId)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("@" id=RId)?
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//id=RId
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }

		//RId
		public RuleCall getIdRIdParserRuleCall_1_1_0() { return cIdRIdParserRuleCall_1_1_0; }
	}

	public class RIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumsINTTerminalRuleCall_0_0 = (RuleCall)cNumsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNumsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNumsINTTerminalRuleCall_1_1_0 = (RuleCall)cNumsAssignment_1_1.eContents().get(0);
		
		//RId:
		//	nums+=INT ("," nums+=INT)*;
		@Override public ParserRule getRule() { return rule; }

		//nums+=INT ("," nums+=INT)*
		public Group getGroup() { return cGroup; }

		//nums+=INT
		public Assignment getNumsAssignment_0() { return cNumsAssignment_0; }

		//INT
		public RuleCall getNumsINTTerminalRuleCall_0_0() { return cNumsINTTerminalRuleCall_0_0; }

		//("," nums+=INT)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nums+=INT
		public Assignment getNumsAssignment_1_1() { return cNumsAssignment_1_1; }

		//INT
		public RuleCall getNumsINTTerminalRuleCall_1_1_0() { return cNumsINTTerminalRuleCall_1_1_0; }
	}
	
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTBOOLEANBooleanKeyword_0_0 = (Keyword)cTBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTCHARCharKeyword_1_0 = (Keyword)cTCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTBYTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTBYTEByteKeyword_2_0 = (Keyword)cTBYTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTSHORTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTSHORTShortKeyword_3_0 = (Keyword)cTSHORTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTINTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTINTIntKeyword_4_0 = (Keyword)cTINTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTLONGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTLONGLongKeyword_5_0 = (Keyword)cTLONGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTFLOATEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTFLOATFloatKeyword_6_0 = (Keyword)cTFLOATEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTDOUBLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTDOUBLEDoubleKeyword_7_0 = (Keyword)cTDOUBLEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTSTRINGEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTSTRINGStringKeyword_8_0 = (Keyword)cTSTRINGEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum DataType:
		//	TBOOLEAN="Boolean" | TCHAR="Char" | TBYTE="Byte" | TSHORT="Short" | TINT="Int" | TLONG="Long" | TFLOAT="Float" |
		//	TDOUBLE="Double" | TSTRING="String";
		public EnumRule getRule() { return rule; }

		//TBOOLEAN="Boolean" | TCHAR="Char" | TBYTE="Byte" | TSHORT="Short" | TINT="Int" | TLONG="Long" | TFLOAT="Float" |
		//TDOUBLE="Double" | TSTRING="String"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TBOOLEAN="Boolean"
		public EnumLiteralDeclaration getTBOOLEANEnumLiteralDeclaration_0() { return cTBOOLEANEnumLiteralDeclaration_0; }

		//"Boolean"
		public Keyword getTBOOLEANBooleanKeyword_0_0() { return cTBOOLEANBooleanKeyword_0_0; }

		//TCHAR="Char"
		public EnumLiteralDeclaration getTCHAREnumLiteralDeclaration_1() { return cTCHAREnumLiteralDeclaration_1; }

		//"Char"
		public Keyword getTCHARCharKeyword_1_0() { return cTCHARCharKeyword_1_0; }

		//TBYTE="Byte"
		public EnumLiteralDeclaration getTBYTEEnumLiteralDeclaration_2() { return cTBYTEEnumLiteralDeclaration_2; }

		//"Byte"
		public Keyword getTBYTEByteKeyword_2_0() { return cTBYTEByteKeyword_2_0; }

		//TSHORT="Short"
		public EnumLiteralDeclaration getTSHORTEnumLiteralDeclaration_3() { return cTSHORTEnumLiteralDeclaration_3; }

		//"Short"
		public Keyword getTSHORTShortKeyword_3_0() { return cTSHORTShortKeyword_3_0; }

		//TINT="Int"
		public EnumLiteralDeclaration getTINTEnumLiteralDeclaration_4() { return cTINTEnumLiteralDeclaration_4; }

		//"Int"
		public Keyword getTINTIntKeyword_4_0() { return cTINTIntKeyword_4_0; }

		//TLONG="Long"
		public EnumLiteralDeclaration getTLONGEnumLiteralDeclaration_5() { return cTLONGEnumLiteralDeclaration_5; }

		//"Long"
		public Keyword getTLONGLongKeyword_5_0() { return cTLONGLongKeyword_5_0; }

		//TFLOAT="Float"
		public EnumLiteralDeclaration getTFLOATEnumLiteralDeclaration_6() { return cTFLOATEnumLiteralDeclaration_6; }

		//"Float"
		public Keyword getTFLOATFloatKeyword_6_0() { return cTFLOATFloatKeyword_6_0; }

		//TDOUBLE="Double"
		public EnumLiteralDeclaration getTDOUBLEEnumLiteralDeclaration_7() { return cTDOUBLEEnumLiteralDeclaration_7; }

		//"Double"
		public Keyword getTDOUBLEDoubleKeyword_7_0() { return cTDOUBLEDoubleKeyword_7_0; }

		//TSTRING="String"
		public EnumLiteralDeclaration getTSTRINGEnumLiteralDeclaration_8() { return cTSTRINGEnumLiteralDeclaration_8; }

		//"String"
		public Keyword getTSTRINGStringKeyword_8_0() { return cTSTRINGStringKeyword_8_0; }
	}

	public class GraphvizOutputElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GraphvizOutput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJPGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJPGJpgKeyword_0_0 = (Keyword)cJPGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBMPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBMPBmpKeyword_1_0 = (Keyword)cBMPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCANONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCANONCanonKeyword_2_0 = (Keyword)cCANONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOTDotKeyword_3_0 = (Keyword)cDOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cXDOTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cXDOTXdotKeyword_4_0 = (Keyword)cXDOTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCMAPEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCMAPCmapKeyword_5_0 = (Keyword)cCMAPEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEPSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEPSEpsKeyword_6_0 = (Keyword)cEPSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFIGEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFIGFigKeyword_7_0 = (Keyword)cFIGEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cGDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cGDGdKeyword_8_0 = (Keyword)cGDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cGD2EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cGD2Gd2Keyword_9_0 = (Keyword)cGD2EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cGIFEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cGIFGifKeyword_10_0 = (Keyword)cGIFEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cGTKEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cGTKGtkKeyword_11_0 = (Keyword)cGTKEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cICOEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cICOIcoKeyword_12_0 = (Keyword)cICOEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cIMAPEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cIMAPImapKeyword_13_0 = (Keyword)cIMAPEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cCMAPXEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cCMAPXCmapxKeyword_14_0 = (Keyword)cCMAPXEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cIMAP_NPEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cIMAP_NPImap_npKeyword_15_0 = (Keyword)cIMAP_NPEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cCMAP_NPEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cCMAP_NPCmapx_npKeyword_16_0 = (Keyword)cCMAP_NPEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cISMAPEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cISMAPIsmapKeyword_17_0 = (Keyword)cISMAPEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cJPEGEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cJPEGJpegKeyword_18_0 = (Keyword)cJPEGEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cJPEEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cJPEJpeKeyword_19_0 = (Keyword)cJPEEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cPDFEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cPDFPdfKeyword_20_0 = (Keyword)cPDFEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cPLAINEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cPLAINPlainKeyword_21_0 = (Keyword)cPLAINEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cPLAIN_EXTEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cPLAIN_EXTPlainExtKeyword_22_0 = (Keyword)cPLAIN_EXTEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cPNGEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cPNGPngKeyword_23_0 = (Keyword)cPNGEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cPSEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cPSPsKeyword_24_0 = (Keyword)cPSEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cPS2EnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cPS2Ps2Keyword_25_0 = (Keyword)cPS2EnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cSVGEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cSVGSvgKeyword_26_0 = (Keyword)cSVGEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cSVGZEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cSVGZSvgzKeyword_27_0 = (Keyword)cSVGZEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cTIFEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cTIFTifKeyword_28_0 = (Keyword)cTIFEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cTIFFEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cTIFFTiffKeyword_29_0 = (Keyword)cTIFFEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cVMLEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cVMLVmlKeyword_30_0 = (Keyword)cVMLEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cVMLZEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cVMLZVmlzKeyword_31_0 = (Keyword)cVMLZEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cVRMLEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cVRMLVrmlKeyword_32_0 = (Keyword)cVRMLEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cWBMPEnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cWBMPWbmpKeyword_33_0 = (Keyword)cWBMPEnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cWEBPEnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cWEBPWebpKeyword_34_0 = (Keyword)cWEBPEnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cXLIBEnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cXLIBXlibKeyword_35_0 = (Keyword)cXLIBEnumLiteralDeclaration_35.eContents().get(0);
		
		//enum GraphvizOutput:
		//	JPG="jpg" | BMP= //Windows Bitmap Format'   
		//	"bmp" | CANON="canon" | DOT= //DOT 
		//	"dot" | XDOT="xdot" | CMAP= //Client-side imagemap (deprecated)
		//	"cmap" | EPS= //Encapsulated PostScript
		//	"eps" | FIG="fig" | GD="gd" | GD2= //GD/GD2 formats
		//	"gd2" | GIF= //GIF
		//	"gif" | GTK= //GTK canvas
		//	"gtk" | ICO= //Icon Image File Format
		//	"ico" | IMAP= //
		//	"imap" | CMAPX= //   Server-side and client-side imagemaps
		//	"cmapx" | IMAP_NP="imap_np" | CMAP_NP= //Server-side and client-side imagemaps
		//	"cmapx_np" | ISMAP= //Server-side imagemap (deprecated)
		//	"ismap" | JPEG="jpeg" | JPE= //JPEG
		//	"jpe" | PDF= //Portable Document Format (PDF)
		//	"pdf" | PLAIN="plain" | PLAIN_EXT= //Simple text format
		//	"plain-ext" | PNG= //Portable Network Graphics format
		//	"png" | PS= //PostScript
		//	"ps" | PS2= //PostScript for PDF
		//	"ps2" | SVG="svg" | SVGZ= //Scalable Vector Graphics
		//	"svgz" | TIF="tif" | TIFF= //TIFF (Tag Image File Format)
		//	"tiff" | VML="vml" | VMLZ= //Vector Markup Language (VML)
		//	"vmlz" | VRML= //VRML
		//	"vrml" | WBMP= //Wireless BitMap format
		//	"wbmp" | WEBP= //Image format for the Web
		//	"webp" | XLIB="xlib";
		public EnumRule getRule() { return rule; }

		//JPG="jpg" | BMP= //Windows Bitmap Format'   
		//"bmp" | CANON="canon" | DOT= //DOT 
		//"dot" | XDOT="xdot" | CMAP= //Client-side imagemap (deprecated)
		//"cmap" | EPS= //Encapsulated PostScript
		//"eps" | FIG="fig" | GD="gd" | GD2= //GD/GD2 formats
		//"gd2" | GIF= //GIF
		//"gif" | GTK= //GTK canvas
		//"gtk" | ICO= //Icon Image File Format
		//"ico" | IMAP= //
		//"imap" | CMAPX= //   Server-side and client-side imagemaps
		//"cmapx" | IMAP_NP="imap_np" | CMAP_NP= //Server-side and client-side imagemaps
		//"cmapx_np" | ISMAP= //Server-side imagemap (deprecated)
		//"ismap" | JPEG="jpeg" | JPE= //JPEG
		//"jpe" | PDF= //Portable Document Format (PDF)
		//"pdf" | PLAIN="plain" | PLAIN_EXT= //Simple text format
		//"plain-ext" | PNG= //Portable Network Graphics format
		//"png" | PS= //PostScript
		//"ps" | PS2= //PostScript for PDF
		//"ps2" | SVG="svg" | SVGZ= //Scalable Vector Graphics
		//"svgz" | TIF="tif" | TIFF= //TIFF (Tag Image File Format)
		//"tiff" | VML="vml" | VMLZ= //Vector Markup Language (VML)
		//"vmlz" | VRML= //VRML
		//"vrml" | WBMP= //Wireless BitMap format
		//"wbmp" | WEBP= //Image format for the Web
		//"webp" | XLIB="xlib"
		public Alternatives getAlternatives() { return cAlternatives; }

		//JPG="jpg"
		public EnumLiteralDeclaration getJPGEnumLiteralDeclaration_0() { return cJPGEnumLiteralDeclaration_0; }

		//"jpg"
		public Keyword getJPGJpgKeyword_0_0() { return cJPGJpgKeyword_0_0; }

		//BMP= //Windows Bitmap Format'   
		//"bmp"
		public EnumLiteralDeclaration getBMPEnumLiteralDeclaration_1() { return cBMPEnumLiteralDeclaration_1; }

		////Windows Bitmap Format'   
		//"bmp"
		public Keyword getBMPBmpKeyword_1_0() { return cBMPBmpKeyword_1_0; }

		//CANON="canon"
		public EnumLiteralDeclaration getCANONEnumLiteralDeclaration_2() { return cCANONEnumLiteralDeclaration_2; }

		//"canon"
		public Keyword getCANONCanonKeyword_2_0() { return cCANONCanonKeyword_2_0; }

		//DOT= //DOT 
		//"dot"
		public EnumLiteralDeclaration getDOTEnumLiteralDeclaration_3() { return cDOTEnumLiteralDeclaration_3; }

		////DOT 
		//"dot"
		public Keyword getDOTDotKeyword_3_0() { return cDOTDotKeyword_3_0; }

		//XDOT="xdot"
		public EnumLiteralDeclaration getXDOTEnumLiteralDeclaration_4() { return cXDOTEnumLiteralDeclaration_4; }

		//"xdot"
		public Keyword getXDOTXdotKeyword_4_0() { return cXDOTXdotKeyword_4_0; }

		//CMAP= //Client-side imagemap (deprecated)
		//"cmap"
		public EnumLiteralDeclaration getCMAPEnumLiteralDeclaration_5() { return cCMAPEnumLiteralDeclaration_5; }

		////Client-side imagemap (deprecated)
		//"cmap"
		public Keyword getCMAPCmapKeyword_5_0() { return cCMAPCmapKeyword_5_0; }

		//EPS= //Encapsulated PostScript
		//"eps"
		public EnumLiteralDeclaration getEPSEnumLiteralDeclaration_6() { return cEPSEnumLiteralDeclaration_6; }

		////Encapsulated PostScript
		//"eps"
		public Keyword getEPSEpsKeyword_6_0() { return cEPSEpsKeyword_6_0; }

		//FIG="fig"
		public EnumLiteralDeclaration getFIGEnumLiteralDeclaration_7() { return cFIGEnumLiteralDeclaration_7; }

		//"fig"
		public Keyword getFIGFigKeyword_7_0() { return cFIGFigKeyword_7_0; }

		//GD="gd"
		public EnumLiteralDeclaration getGDEnumLiteralDeclaration_8() { return cGDEnumLiteralDeclaration_8; }

		//"gd"
		public Keyword getGDGdKeyword_8_0() { return cGDGdKeyword_8_0; }

		//GD2= //GD/GD2 formats
		//"gd2"
		public EnumLiteralDeclaration getGD2EnumLiteralDeclaration_9() { return cGD2EnumLiteralDeclaration_9; }

		////GD/GD2 formats
		//"gd2"
		public Keyword getGD2Gd2Keyword_9_0() { return cGD2Gd2Keyword_9_0; }

		//GIF= //GIF
		//"gif"
		public EnumLiteralDeclaration getGIFEnumLiteralDeclaration_10() { return cGIFEnumLiteralDeclaration_10; }

		////GIF
		//"gif"
		public Keyword getGIFGifKeyword_10_0() { return cGIFGifKeyword_10_0; }

		//GTK= //GTK canvas
		//"gtk"
		public EnumLiteralDeclaration getGTKEnumLiteralDeclaration_11() { return cGTKEnumLiteralDeclaration_11; }

		////GTK canvas
		//"gtk"
		public Keyword getGTKGtkKeyword_11_0() { return cGTKGtkKeyword_11_0; }

		//ICO= //Icon Image File Format
		//"ico"
		public EnumLiteralDeclaration getICOEnumLiteralDeclaration_12() { return cICOEnumLiteralDeclaration_12; }

		////Icon Image File Format
		//"ico"
		public Keyword getICOIcoKeyword_12_0() { return cICOIcoKeyword_12_0; }

		//IMAP= //
		//"imap"
		public EnumLiteralDeclaration getIMAPEnumLiteralDeclaration_13() { return cIMAPEnumLiteralDeclaration_13; }

		////
		//"imap"
		public Keyword getIMAPImapKeyword_13_0() { return cIMAPImapKeyword_13_0; }

		//CMAPX= //   Server-side and client-side imagemaps
		//"cmapx"
		public EnumLiteralDeclaration getCMAPXEnumLiteralDeclaration_14() { return cCMAPXEnumLiteralDeclaration_14; }

		////   Server-side and client-side imagemaps
		//"cmapx"
		public Keyword getCMAPXCmapxKeyword_14_0() { return cCMAPXCmapxKeyword_14_0; }

		//IMAP_NP="imap_np"
		public EnumLiteralDeclaration getIMAP_NPEnumLiteralDeclaration_15() { return cIMAP_NPEnumLiteralDeclaration_15; }

		//"imap_np"
		public Keyword getIMAP_NPImap_npKeyword_15_0() { return cIMAP_NPImap_npKeyword_15_0; }

		//CMAP_NP= //Server-side and client-side imagemaps
		//"cmapx_np"
		public EnumLiteralDeclaration getCMAP_NPEnumLiteralDeclaration_16() { return cCMAP_NPEnumLiteralDeclaration_16; }

		////Server-side and client-side imagemaps
		//"cmapx_np"
		public Keyword getCMAP_NPCmapx_npKeyword_16_0() { return cCMAP_NPCmapx_npKeyword_16_0; }

		//ISMAP= //Server-side imagemap (deprecated)
		//"ismap"
		public EnumLiteralDeclaration getISMAPEnumLiteralDeclaration_17() { return cISMAPEnumLiteralDeclaration_17; }

		////Server-side imagemap (deprecated)
		//"ismap"
		public Keyword getISMAPIsmapKeyword_17_0() { return cISMAPIsmapKeyword_17_0; }

		//JPEG="jpeg"
		public EnumLiteralDeclaration getJPEGEnumLiteralDeclaration_18() { return cJPEGEnumLiteralDeclaration_18; }

		//"jpeg"
		public Keyword getJPEGJpegKeyword_18_0() { return cJPEGJpegKeyword_18_0; }

		//JPE= //JPEG
		//"jpe"
		public EnumLiteralDeclaration getJPEEnumLiteralDeclaration_19() { return cJPEEnumLiteralDeclaration_19; }

		////JPEG
		//"jpe"
		public Keyword getJPEJpeKeyword_19_0() { return cJPEJpeKeyword_19_0; }

		//PDF= //Portable Document Format (PDF)
		//"pdf"
		public EnumLiteralDeclaration getPDFEnumLiteralDeclaration_20() { return cPDFEnumLiteralDeclaration_20; }

		////Portable Document Format (PDF)
		//"pdf"
		public Keyword getPDFPdfKeyword_20_0() { return cPDFPdfKeyword_20_0; }

		//PLAIN="plain"
		public EnumLiteralDeclaration getPLAINEnumLiteralDeclaration_21() { return cPLAINEnumLiteralDeclaration_21; }

		//"plain"
		public Keyword getPLAINPlainKeyword_21_0() { return cPLAINPlainKeyword_21_0; }

		//PLAIN_EXT= //Simple text format
		//"plain-ext"
		public EnumLiteralDeclaration getPLAIN_EXTEnumLiteralDeclaration_22() { return cPLAIN_EXTEnumLiteralDeclaration_22; }

		////Simple text format
		//"plain-ext"
		public Keyword getPLAIN_EXTPlainExtKeyword_22_0() { return cPLAIN_EXTPlainExtKeyword_22_0; }

		//PNG= //Portable Network Graphics format
		//"png"
		public EnumLiteralDeclaration getPNGEnumLiteralDeclaration_23() { return cPNGEnumLiteralDeclaration_23; }

		////Portable Network Graphics format
		//"png"
		public Keyword getPNGPngKeyword_23_0() { return cPNGPngKeyword_23_0; }

		//PS= //PostScript
		//"ps"
		public EnumLiteralDeclaration getPSEnumLiteralDeclaration_24() { return cPSEnumLiteralDeclaration_24; }

		////PostScript
		//"ps"
		public Keyword getPSPsKeyword_24_0() { return cPSPsKeyword_24_0; }

		//PS2= //PostScript for PDF
		//"ps2"
		public EnumLiteralDeclaration getPS2EnumLiteralDeclaration_25() { return cPS2EnumLiteralDeclaration_25; }

		////PostScript for PDF
		//"ps2"
		public Keyword getPS2Ps2Keyword_25_0() { return cPS2Ps2Keyword_25_0; }

		//SVG="svg"
		public EnumLiteralDeclaration getSVGEnumLiteralDeclaration_26() { return cSVGEnumLiteralDeclaration_26; }

		//"svg"
		public Keyword getSVGSvgKeyword_26_0() { return cSVGSvgKeyword_26_0; }

		//SVGZ= //Scalable Vector Graphics
		//"svgz"
		public EnumLiteralDeclaration getSVGZEnumLiteralDeclaration_27() { return cSVGZEnumLiteralDeclaration_27; }

		////Scalable Vector Graphics
		//"svgz"
		public Keyword getSVGZSvgzKeyword_27_0() { return cSVGZSvgzKeyword_27_0; }

		//TIF="tif"
		public EnumLiteralDeclaration getTIFEnumLiteralDeclaration_28() { return cTIFEnumLiteralDeclaration_28; }

		//"tif"
		public Keyword getTIFTifKeyword_28_0() { return cTIFTifKeyword_28_0; }

		//TIFF= //TIFF (Tag Image File Format)
		//"tiff"
		public EnumLiteralDeclaration getTIFFEnumLiteralDeclaration_29() { return cTIFFEnumLiteralDeclaration_29; }

		////TIFF (Tag Image File Format)
		//"tiff"
		public Keyword getTIFFTiffKeyword_29_0() { return cTIFFTiffKeyword_29_0; }

		//VML="vml"
		public EnumLiteralDeclaration getVMLEnumLiteralDeclaration_30() { return cVMLEnumLiteralDeclaration_30; }

		//"vml"
		public Keyword getVMLVmlKeyword_30_0() { return cVMLVmlKeyword_30_0; }

		//VMLZ= //Vector Markup Language (VML)
		//"vmlz"
		public EnumLiteralDeclaration getVMLZEnumLiteralDeclaration_31() { return cVMLZEnumLiteralDeclaration_31; }

		////Vector Markup Language (VML)
		//"vmlz"
		public Keyword getVMLZVmlzKeyword_31_0() { return cVMLZVmlzKeyword_31_0; }

		//VRML= //VRML
		//"vrml"
		public EnumLiteralDeclaration getVRMLEnumLiteralDeclaration_32() { return cVRMLEnumLiteralDeclaration_32; }

		////VRML
		//"vrml"
		public Keyword getVRMLVrmlKeyword_32_0() { return cVRMLVrmlKeyword_32_0; }

		//WBMP= //Wireless BitMap format
		//"wbmp"
		public EnumLiteralDeclaration getWBMPEnumLiteralDeclaration_33() { return cWBMPEnumLiteralDeclaration_33; }

		////Wireless BitMap format
		//"wbmp"
		public Keyword getWBMPWbmpKeyword_33_0() { return cWBMPWbmpKeyword_33_0; }

		//WEBP= //Image format for the Web
		//"webp"
		public EnumLiteralDeclaration getWEBPEnumLiteralDeclaration_34() { return cWEBPEnumLiteralDeclaration_34; }

		////Image format for the Web
		//"webp"
		public Keyword getWEBPWebpKeyword_34_0() { return cWEBPWebpKeyword_34_0; }

		//XLIB="xlib"
		public EnumLiteralDeclaration getXLIBEnumLiteralDeclaration_35() { return cXLIBEnumLiteralDeclaration_35; }

		//"xlib"
		public Keyword getXLIBXlibKeyword_35_0() { return cXLIBXlibKeyword_35_0; }
	}

	public class ConstraintLanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintLanguage");
		private final EnumLiteralDeclaration cOCLEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOCLOCLKeyword_0 = (Keyword)cOCLEnumLiteralDeclaration.eContents().get(0);
		
		//// |KodKod = 'KodKod'; 
		//enum ConstraintLanguage:
		//	OCL;
		public EnumRule getRule() { return rule; }

		//OCL
		public EnumLiteralDeclaration getOCLEnumLiteralDeclaration() { return cOCLEnumLiteralDeclaration; }

		//"OCL"
		public Keyword getOCLOCLKeyword_0() { return cOCLOCLKeyword_0; }
	}
	
	private final ModelElements pModel;
	private final DataTypeElements unknownRuleDataType;
	private final GraphvizOutputElements unknownRuleGraphvizOutput;
	private final ConstraintLanguageElements unknownRuleConstraintLanguage;
	private final BatchElements pBatch;
	private final CommandElements pCommand;
	private final MakeEmfElements pMakeEmf;
	private final MakeEcoreElements pMakeEcore;
	private final MakeImageElements pMakeImage;
	private final MakeDiagramElements pMakeDiagram;
	private final TestMatchElements pTestMatch;
	private final SpecificationElements pSpecification;
	private final ConstraintListElements pConstraintList;
	private final ChoosenSpecificationElements pChoosenSpecification;
	private final VersionElements pVersion;
	private final ChoosenSignatureElements pChoosenSignature;
	private final ConstraintElements pConstraint;
	private final SignatureElements pSignature;
	private final ValidatorElements pValidator;
	private final GraphElements pGraph;
	private final ElementElements pElement;
	private final ArrowElements pArrow;
	private final NodeElements pNode;
	private final NodeSimpleElements pNodeSimple;
	private final PropertyElements pProperty;
	private final AttributeValueElements pAttributeValue;
	private final DpfIdElements pDpfId;
	private final RIdElements pRId;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DPFTextGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.unknownRuleDataType = new DataTypeElements();
		this.unknownRuleGraphvizOutput = new GraphvizOutputElements();
		this.unknownRuleConstraintLanguage = new ConstraintLanguageElements();
		this.pBatch = new BatchElements();
		this.pCommand = new CommandElements();
		this.pMakeEmf = new MakeEmfElements();
		this.pMakeEcore = new MakeEcoreElements();
		this.pMakeImage = new MakeImageElements();
		this.pMakeDiagram = new MakeDiagramElements();
		this.pTestMatch = new TestMatchElements();
		this.pSpecification = new SpecificationElements();
		this.pConstraintList = new ConstraintListElements();
		this.pChoosenSpecification = new ChoosenSpecificationElements();
		this.pVersion = new VersionElements();
		this.pChoosenSignature = new ChoosenSignatureElements();
		this.pConstraint = new ConstraintElements();
		this.pSignature = new SignatureElements();
		this.pValidator = new ValidatorElements();
		this.pGraph = new GraphElements();
		this.pElement = new ElementElements();
		this.pArrow = new ArrowElements();
		this.pNode = new NodeElements();
		this.pNodeSimple = new NodeSimpleElements();
		this.pProperty = new PropertyElements();
		this.pAttributeValue = new AttributeValueElements();
		this.pDpfId = new DpfIdElements();
		this.pRId = new RIdElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hib.dpf.text.DPFText".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Program:                                                                                                                                                                                                           
	//Model:
	//	Specification | Signature | Batch;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//enum DataType:
	//	TBOOLEAN="Boolean" | TCHAR="Char" | TBYTE="Byte" | TSHORT="Short" | TINT="Int" | TLONG="Long" | TFLOAT="Float" |
	//	TDOUBLE="Double" | TSTRING="String";
	public DataTypeElements getDataTypeAccess() {
		return unknownRuleDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//enum GraphvizOutput:
	//	JPG="jpg" | BMP= //Windows Bitmap Format'   
	//	"bmp" | CANON="canon" | DOT= //DOT 
	//	"dot" | XDOT="xdot" | CMAP= //Client-side imagemap (deprecated)
	//	"cmap" | EPS= //Encapsulated PostScript
	//	"eps" | FIG="fig" | GD="gd" | GD2= //GD/GD2 formats
	//	"gd2" | GIF= //GIF
	//	"gif" | GTK= //GTK canvas
	//	"gtk" | ICO= //Icon Image File Format
	//	"ico" | IMAP= //
	//	"imap" | CMAPX= //   Server-side and client-side imagemaps
	//	"cmapx" | IMAP_NP="imap_np" | CMAP_NP= //Server-side and client-side imagemaps
	//	"cmapx_np" | ISMAP= //Server-side imagemap (deprecated)
	//	"ismap" | JPEG="jpeg" | JPE= //JPEG
	//	"jpe" | PDF= //Portable Document Format (PDF)
	//	"pdf" | PLAIN="plain" | PLAIN_EXT= //Simple text format
	//	"plain-ext" | PNG= //Portable Network Graphics format
	//	"png" | PS= //PostScript
	//	"ps" | PS2= //PostScript for PDF
	//	"ps2" | SVG="svg" | SVGZ= //Scalable Vector Graphics
	//	"svgz" | TIF="tif" | TIFF= //TIFF (Tag Image File Format)
	//	"tiff" | VML="vml" | VMLZ= //Vector Markup Language (VML)
	//	"vmlz" | VRML= //VRML
	//	"vrml" | WBMP= //Wireless BitMap format
	//	"wbmp" | WEBP= //Image format for the Web
	//	"webp" | XLIB="xlib";
	public GraphvizOutputElements getGraphvizOutputAccess() {
		return unknownRuleGraphvizOutput;
	}
	
	public EnumRule getGraphvizOutputRule() {
		return getGraphvizOutputAccess().getRule();
	}

	//// |KodKod = 'KodKod'; 
	//enum ConstraintLanguage:
	//	OCL;
	public ConstraintLanguageElements getConstraintLanguageAccess() {
		return unknownRuleConstraintLanguage;
	}
	
	public EnumRule getConstraintLanguageRule() {
		return getConstraintLanguageAccess().getRule();
	}

	////
	////Batch jobs:
	////
	//Batch:
	//	"Batch" "{" (commands+=Command ("," commands+=Command)*)? "}";
	public BatchElements getBatchAccess() {
		return pBatch;
	}
	
	public ParserRule getBatchRule() {
		return getBatchAccess().getRule();
	}

	////"Program-Parts":
	////Rule | Evolution;
	//Command:
	//	MakeEmf | MakeEcore | MakeImage | MakeDiagram | TestMatch;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//MakeEmf:
	//	"emf" "(" id=ID ")";
	public MakeEmfElements getMakeEmfAccess() {
		return pMakeEmf;
	}
	
	public ParserRule getMakeEmfRule() {
		return getMakeEmfAccess().getRule();
	}

	//MakeEcore:
	//	"ecore" "(" id=ID ")";
	public MakeEcoreElements getMakeEcoreAccess() {
		return pMakeEcore;
	}
	
	public ParserRule getMakeEcoreRule() {
		return getMakeEcoreAccess().getRule();
	}

	//MakeImage:
	//	"image" "(" id=ID ("," type=GraphvizOutput)? ")";
	public MakeImageElements getMakeImageAccess() {
		return pMakeImage;
	}
	
	public ParserRule getMakeImageRule() {
		return getMakeImageAccess().getRule();
	}

	//MakeDiagram:
	//	"diagram" "(" id=ID ("," type=GraphvizOutput)? ")";
	public MakeDiagramElements getMakeDiagramAccess() {
		return pMakeDiagram;
	}
	
	public ParserRule getMakeDiagramRule() {
		return getMakeDiagramAccess().getRule();
	}

	//TestMatch:
	//	"testMatch" "(" search=ID "," into=ID ")";
	public TestMatchElements getTestMatchAccess() {
		return pTestMatch;
	}
	
	public ParserRule getTestMatchRule() {
		return getTestMatchAccess().getRule();
	}

	////Evolution: 'simpleEvolution(' lhs=ID '<-' diff=ID '->' rhS=ID ',' typeGraph=ID ')'; 
	////
	////Specification:
	////
	//Specification:
	//	"Specification" version=Version ":" type=ChoosenSpecification output="<PLAIN>"? "{" graph=Graph
	//	atomicConstraints+=ConstraintList* "}";
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//ConstraintList:
	//	"Constraints" "!" constraintSemantic=ChoosenSignature "{" (constraints+=Constraint ("," constraints+=Constraint)*)?
	//	"}";
	public ConstraintListElements getConstraintListAccess() {
		return pConstraintList;
	}
	
	public ParserRule getConstraintListRule() {
		return getConstraintListAccess().getRule();
	}

	//ChoosenSpecification:
	//	id=ID "<version=" versionName=STRING ">";
	public ChoosenSpecificationElements getChoosenSpecificationAccess() {
		return pChoosenSpecification;
	}
	
	public ParserRule getChoosenSpecificationRule() {
		return getChoosenSpecificationAccess().getRule();
	}

	//Version:
	//	"<version=" name=STRING "," number=INT "," nextNumber=INT ">";
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//ChoosenSignature:
	//	id=ID "<version=" versionName=STRING ">";
	public ChoosenSignatureElements getChoosenSignatureAccess() {
		return pChoosenSignature;
	}
	
	public ParserRule getChoosenSignatureRule() {
		return getChoosenSignatureAccess().getRule();
	}

	//Constraint:
	//	type=DpfId "(" (parameter+=STRING ("," parameter+=STRING)*)? ")" "{" (arity_d+=(Arrow | NodeSimple) (","
	//	arity_d+=(Arrow | NodeSimple))*) "}";
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	////
	////Signature:
	////
	//Signature:
	//	"Signature" version=Version ("<" input=ConstraintLanguage ">")? "{" validators+=Validator ("," validators+=Validator)*
	//	"}";
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}

	//Validator:
	//	id=DpfId "(" (parameter_vars+=ID ("," parameter_vars+=ID)*)? ")" "{" (arity+=(Arrow | NodeSimple) ("," arity+=(Arrow |
	//	NodeSimple))*) "}" "=" ocl=STRING "errorMsg=" errorMsg=STRING;
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	////
	////Typed graphs:
	////
	////Warning is OK, Empty Graph is possible
	//Graph:
	//	"Graph" "{" (elements+=Element ("," elements+=Element)*)? "}";
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//Element:
	//	Node | Arrow;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Arrow:
	//	sr=NodeSimple "-" id=DpfId ":*->" tgDataType=DataType | sr=NodeSimple "-" id=DpfId ":" type=DpfId "->"
	//	tgValue=AttributeValue | sr=NodeSimple "-" id=DpfId ":" type=DpfId "->" tgNode=NodeSimple | sr=NodeSimple "-|>"
	//	tgNode=NodeSimple;
	public ArrowElements getArrowAccess() {
		return pArrow;
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}

	//Node:
	//	id=DpfId ":" type=DpfId ("extends" inh+=NodeSimple ("and" inh+=NodeSimple)*)? ("{" (properties+=Property (","
	//	properties+=Property)*)? "}")?;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//NodeSimple:
	//	id=DpfId ":" type=DpfId;
	public NodeSimpleElements getNodeSimpleAccess() {
		return pNodeSimple;
	}
	
	public ParserRule getNodeSimpleRule() {
		return getNodeSimpleAccess().getRule();
	}

	//Property:
	//	id=DpfId ":*->" tgDataType=DataType | id=DpfId ":" type=DpfId "->" tgValue=AttributeValue | id=DpfId ":" type=DpfId
	//	"->" tgNode=NodeSimple;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	////Id for Variable 
	//AttributeValue:
	//	value=STRING | variableId=ID;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//DpfId:
	//	name=ID ("@" id=RId)?;
	public DpfIdElements getDpfIdAccess() {
		return pDpfId;
	}
	
	public ParserRule getDpfIdRule() {
		return getDpfIdAccess().getRule();
	}

	//RId:
	//	nums+=INT ("," nums+=INT)*;
	public RIdElements getRIdAccess() {
		return pRId;
	}
	
	public ParserRule getRIdRule() {
		return getRIdAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
