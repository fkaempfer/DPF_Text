/*
 * generated by Xtext
 */
package no.hib.dpf.text.ui;

import no.hib.dpf.text.ui.outline.TreeOutlinePage;

import org.eclipse.core.resources.IResourceChangeEvent;
import org.eclipse.core.resources.IResourceChangeListener;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;
import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider;
import org.eclipse.xtext.ui.editor.syntaxcoloring.AbstractAntlrTokenToAttributeIdMapper;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfiguration;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used within the IDE.
 */
public class DPFTextUiModule extends no.hib.dpf.text.ui.AbstractDPFTextUiModule {

	public DPFTextUiModule(AbstractUIPlugin plugin) {
		super(plugin);

		// Add a change listner for a resource to do additional functionality on
		// save that require
		// access to the IFile (here Validation is automatically called on save)
		ResourcesPlugin.getWorkspace().addResourceChangeListener(
				new IResourceChangeListener() {
					@Override
					public void resourceChanged(IResourceChangeEvent event) {
						try {
							event.getDelta().accept(FileSaveDetector.INSTANCE);
						} catch (CoreException e) {
							e.printStackTrace();
						}
					}
				}, IResourceChangeEvent.POST_BUILD);
	}

	public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration() {
		return DPFTextHighlighting.class;
	}

	public Class<? extends ISemanticHighlightingCalculator> bindSemanticConfig() {
		return DPFTextSemanticHighlighting.class;
	}

	public Class<? extends AbstractAntlrTokenToAttributeIdMapper> bindAbstractAntlrTokenToAttributeIdMapper() {
		return DPFTextAntlrTokenToAttributeIdMapper.class;
	}

	public void configureDocumentProvider(Binder binder) {
		binder.bind(XtextDocumentProvider.class).to(
				DPFTextDocumentProvider.class);
	}

	@Override
	public Class<? extends IContentOutlinePage> bindIContentOutlinePage() {
		return TreeOutlinePage.class;
	}

}
