/*
 * generated by Xtext
 */
package no.hib.dpf.text.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import no.hib.dpf.text.services.DPFTextGrammarAccess;

public class DPFTextParser extends AbstractContentAssistParser {
	
	@Inject
	private DPFTextGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected no.hib.dpf.text.ui.contentassist.antlr.internal.InternalDPFTextParser createParser() {
		no.hib.dpf.text.ui.contentassist.antlr.internal.InternalDPFTextParser result = new no.hib.dpf.text.ui.contentassist.antlr.internal.InternalDPFTextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getConstraintAccess().getArity_dAlternatives_5_0_0(), "rule__Constraint__Arity_dAlternatives_5_0_0");
					put(grammarAccess.getConstraintAccess().getArity_dAlternatives_5_1_1_0(), "rule__Constraint__Arity_dAlternatives_5_1_1_0");
					put(grammarAccess.getValidatorAccess().getArityAlternatives_5_0_0(), "rule__Validator__ArityAlternatives_5_0_0");
					put(grammarAccess.getValidatorAccess().getArityAlternatives_5_1_1_0(), "rule__Validator__ArityAlternatives_5_1_1_0");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getArrowAccess().getAlternatives(), "rule__Arrow__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getAttributeValueAccess().getAlternatives(), "rule__AttributeValue__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getGraphvizOutputAccess().getAlternatives(), "rule__GraphvizOutput__Alternatives");
					put(grammarAccess.getBatchAccess().getGroup(), "rule__Batch__Group__0");
					put(grammarAccess.getBatchAccess().getGroup_2(), "rule__Batch__Group_2__0");
					put(grammarAccess.getBatchAccess().getGroup_2_1(), "rule__Batch__Group_2_1__0");
					put(grammarAccess.getMakeEmfAccess().getGroup(), "rule__MakeEmf__Group__0");
					put(grammarAccess.getMakeEcoreAccess().getGroup(), "rule__MakeEcore__Group__0");
					put(grammarAccess.getMakeImageAccess().getGroup(), "rule__MakeImage__Group__0");
					put(grammarAccess.getMakeImageAccess().getGroup_3(), "rule__MakeImage__Group_3__0");
					put(grammarAccess.getMakeDiagramAccess().getGroup(), "rule__MakeDiagram__Group__0");
					put(grammarAccess.getMakeDiagramAccess().getGroup_3(), "rule__MakeDiagram__Group_3__0");
					put(grammarAccess.getTestMatchAccess().getGroup(), "rule__TestMatch__Group__0");
					put(grammarAccess.getSpecificationAccess().getGroup(), "rule__Specification__Group__0");
					put(grammarAccess.getConstraintListAccess().getGroup(), "rule__ConstraintList__Group__0");
					put(grammarAccess.getConstraintListAccess().getGroup_4(), "rule__ConstraintList__Group_4__0");
					put(grammarAccess.getConstraintListAccess().getGroup_4_1(), "rule__ConstraintList__Group_4_1__0");
					put(grammarAccess.getChoosenSpecificationAccess().getGroup(), "rule__ChoosenSpecification__Group__0");
					put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
					put(grammarAccess.getChoosenSignatureAccess().getGroup(), "rule__ChoosenSignature__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup_2(), "rule__Constraint__Group_2__0");
					put(grammarAccess.getConstraintAccess().getGroup_2_1(), "rule__Constraint__Group_2_1__0");
					put(grammarAccess.getConstraintAccess().getGroup_5(), "rule__Constraint__Group_5__0");
					put(grammarAccess.getConstraintAccess().getGroup_5_1(), "rule__Constraint__Group_5_1__0");
					put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
					put(grammarAccess.getSignatureAccess().getGroup_2(), "rule__Signature__Group_2__0");
					put(grammarAccess.getSignatureAccess().getGroup_5(), "rule__Signature__Group_5__0");
					put(grammarAccess.getValidatorAccess().getGroup(), "rule__Validator__Group__0");
					put(grammarAccess.getValidatorAccess().getGroup_2(), "rule__Validator__Group_2__0");
					put(grammarAccess.getValidatorAccess().getGroup_2_1(), "rule__Validator__Group_2_1__0");
					put(grammarAccess.getValidatorAccess().getGroup_5(), "rule__Validator__Group_5__0");
					put(grammarAccess.getValidatorAccess().getGroup_5_1(), "rule__Validator__Group_5_1__0");
					put(grammarAccess.getGraphAccess().getGroup(), "rule__Graph__Group__0");
					put(grammarAccess.getGraphAccess().getGroup_2(), "rule__Graph__Group_2__0");
					put(grammarAccess.getGraphAccess().getGroup_2_1(), "rule__Graph__Group_2_1__0");
					put(grammarAccess.getArrowAccess().getGroup_0(), "rule__Arrow__Group_0__0");
					put(grammarAccess.getArrowAccess().getGroup_1(), "rule__Arrow__Group_1__0");
					put(grammarAccess.getArrowAccess().getGroup_2(), "rule__Arrow__Group_2__0");
					put(grammarAccess.getArrowAccess().getGroup_3(), "rule__Arrow__Group_3__0");
					put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
					put(grammarAccess.getNodeAccess().getGroup_3(), "rule__Node__Group_3__0");
					put(grammarAccess.getNodeAccess().getGroup_3_2(), "rule__Node__Group_3_2__0");
					put(grammarAccess.getNodeAccess().getGroup_4(), "rule__Node__Group_4__0");
					put(grammarAccess.getNodeAccess().getGroup_4_1(), "rule__Node__Group_4_1__0");
					put(grammarAccess.getNodeAccess().getGroup_4_1_1(), "rule__Node__Group_4_1_1__0");
					put(grammarAccess.getNodeSimpleAccess().getGroup(), "rule__NodeSimple__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_0(), "rule__Property__Group_0__0");
					put(grammarAccess.getPropertyAccess().getGroup_1(), "rule__Property__Group_1__0");
					put(grammarAccess.getPropertyAccess().getGroup_2(), "rule__Property__Group_2__0");
					put(grammarAccess.getDpfIdAccess().getGroup(), "rule__DpfId__Group__0");
					put(grammarAccess.getDpfIdAccess().getGroup_1(), "rule__DpfId__Group_1__0");
					put(grammarAccess.getRIdAccess().getGroup(), "rule__RId__Group__0");
					put(grammarAccess.getRIdAccess().getGroup_1(), "rule__RId__Group_1__0");
					put(grammarAccess.getBatchAccess().getCommandsAssignment_2_0(), "rule__Batch__CommandsAssignment_2_0");
					put(grammarAccess.getBatchAccess().getCommandsAssignment_2_1_1(), "rule__Batch__CommandsAssignment_2_1_1");
					put(grammarAccess.getMakeEmfAccess().getIdAssignment_2(), "rule__MakeEmf__IdAssignment_2");
					put(grammarAccess.getMakeEcoreAccess().getIdAssignment_2(), "rule__MakeEcore__IdAssignment_2");
					put(grammarAccess.getMakeImageAccess().getIdAssignment_2(), "rule__MakeImage__IdAssignment_2");
					put(grammarAccess.getMakeImageAccess().getTypeAssignment_3_1(), "rule__MakeImage__TypeAssignment_3_1");
					put(grammarAccess.getMakeDiagramAccess().getIdAssignment_2(), "rule__MakeDiagram__IdAssignment_2");
					put(grammarAccess.getMakeDiagramAccess().getTypeAssignment_3_1(), "rule__MakeDiagram__TypeAssignment_3_1");
					put(grammarAccess.getTestMatchAccess().getSearchAssignment_2(), "rule__TestMatch__SearchAssignment_2");
					put(grammarAccess.getTestMatchAccess().getIntoAssignment_4(), "rule__TestMatch__IntoAssignment_4");
					put(grammarAccess.getSpecificationAccess().getVersionAssignment_1(), "rule__Specification__VersionAssignment_1");
					put(grammarAccess.getSpecificationAccess().getTypeAssignment_3(), "rule__Specification__TypeAssignment_3");
					put(grammarAccess.getSpecificationAccess().getOutputAssignment_4(), "rule__Specification__OutputAssignment_4");
					put(grammarAccess.getSpecificationAccess().getGraphAssignment_6(), "rule__Specification__GraphAssignment_6");
					put(grammarAccess.getSpecificationAccess().getAtomicConstraintsAssignment_7(), "rule__Specification__AtomicConstraintsAssignment_7");
					put(grammarAccess.getConstraintListAccess().getConstraintSemanticAssignment_2(), "rule__ConstraintList__ConstraintSemanticAssignment_2");
					put(grammarAccess.getConstraintListAccess().getConstraintsAssignment_4_0(), "rule__ConstraintList__ConstraintsAssignment_4_0");
					put(grammarAccess.getConstraintListAccess().getConstraintsAssignment_4_1_1(), "rule__ConstraintList__ConstraintsAssignment_4_1_1");
					put(grammarAccess.getChoosenSpecificationAccess().getIdAssignment_0(), "rule__ChoosenSpecification__IdAssignment_0");
					put(grammarAccess.getChoosenSpecificationAccess().getVersionNameAssignment_2(), "rule__ChoosenSpecification__VersionNameAssignment_2");
					put(grammarAccess.getVersionAccess().getNameAssignment_1(), "rule__Version__NameAssignment_1");
					put(grammarAccess.getVersionAccess().getNumberAssignment_3(), "rule__Version__NumberAssignment_3");
					put(grammarAccess.getVersionAccess().getNextNumberAssignment_5(), "rule__Version__NextNumberAssignment_5");
					put(grammarAccess.getChoosenSignatureAccess().getIdAssignment_0(), "rule__ChoosenSignature__IdAssignment_0");
					put(grammarAccess.getChoosenSignatureAccess().getVersionNameAssignment_2(), "rule__ChoosenSignature__VersionNameAssignment_2");
					put(grammarAccess.getConstraintAccess().getTypeAssignment_0(), "rule__Constraint__TypeAssignment_0");
					put(grammarAccess.getConstraintAccess().getParameterAssignment_2_0(), "rule__Constraint__ParameterAssignment_2_0");
					put(grammarAccess.getConstraintAccess().getParameterAssignment_2_1_1(), "rule__Constraint__ParameterAssignment_2_1_1");
					put(grammarAccess.getConstraintAccess().getArity_dAssignment_5_0(), "rule__Constraint__Arity_dAssignment_5_0");
					put(grammarAccess.getConstraintAccess().getArity_dAssignment_5_1_1(), "rule__Constraint__Arity_dAssignment_5_1_1");
					put(grammarAccess.getSignatureAccess().getVersionAssignment_1(), "rule__Signature__VersionAssignment_1");
					put(grammarAccess.getSignatureAccess().getInputAssignment_2_1(), "rule__Signature__InputAssignment_2_1");
					put(grammarAccess.getSignatureAccess().getValidatorsAssignment_4(), "rule__Signature__ValidatorsAssignment_4");
					put(grammarAccess.getSignatureAccess().getValidatorsAssignment_5_1(), "rule__Signature__ValidatorsAssignment_5_1");
					put(grammarAccess.getValidatorAccess().getIdAssignment_0(), "rule__Validator__IdAssignment_0");
					put(grammarAccess.getValidatorAccess().getParameter_varsAssignment_2_0(), "rule__Validator__Parameter_varsAssignment_2_0");
					put(grammarAccess.getValidatorAccess().getParameter_varsAssignment_2_1_1(), "rule__Validator__Parameter_varsAssignment_2_1_1");
					put(grammarAccess.getValidatorAccess().getArityAssignment_5_0(), "rule__Validator__ArityAssignment_5_0");
					put(grammarAccess.getValidatorAccess().getArityAssignment_5_1_1(), "rule__Validator__ArityAssignment_5_1_1");
					put(grammarAccess.getValidatorAccess().getOclAssignment_8(), "rule__Validator__OclAssignment_8");
					put(grammarAccess.getValidatorAccess().getErrorMsgAssignment_10(), "rule__Validator__ErrorMsgAssignment_10");
					put(grammarAccess.getGraphAccess().getElementsAssignment_2_0(), "rule__Graph__ElementsAssignment_2_0");
					put(grammarAccess.getGraphAccess().getElementsAssignment_2_1_1(), "rule__Graph__ElementsAssignment_2_1_1");
					put(grammarAccess.getArrowAccess().getSrAssignment_0_0(), "rule__Arrow__SrAssignment_0_0");
					put(grammarAccess.getArrowAccess().getIdAssignment_0_2(), "rule__Arrow__IdAssignment_0_2");
					put(grammarAccess.getArrowAccess().getTgDataTypeAssignment_0_4(), "rule__Arrow__TgDataTypeAssignment_0_4");
					put(grammarAccess.getArrowAccess().getSrAssignment_1_0(), "rule__Arrow__SrAssignment_1_0");
					put(grammarAccess.getArrowAccess().getIdAssignment_1_2(), "rule__Arrow__IdAssignment_1_2");
					put(grammarAccess.getArrowAccess().getTypeAssignment_1_4(), "rule__Arrow__TypeAssignment_1_4");
					put(grammarAccess.getArrowAccess().getTgValueAssignment_1_6(), "rule__Arrow__TgValueAssignment_1_6");
					put(grammarAccess.getArrowAccess().getSrAssignment_2_0(), "rule__Arrow__SrAssignment_2_0");
					put(grammarAccess.getArrowAccess().getIdAssignment_2_2(), "rule__Arrow__IdAssignment_2_2");
					put(grammarAccess.getArrowAccess().getTypeAssignment_2_4(), "rule__Arrow__TypeAssignment_2_4");
					put(grammarAccess.getArrowAccess().getTgNodeAssignment_2_6(), "rule__Arrow__TgNodeAssignment_2_6");
					put(grammarAccess.getArrowAccess().getSrAssignment_3_0(), "rule__Arrow__SrAssignment_3_0");
					put(grammarAccess.getArrowAccess().getTgNodeAssignment_3_2(), "rule__Arrow__TgNodeAssignment_3_2");
					put(grammarAccess.getNodeAccess().getIdAssignment_0(), "rule__Node__IdAssignment_0");
					put(grammarAccess.getNodeAccess().getTypeAssignment_2(), "rule__Node__TypeAssignment_2");
					put(grammarAccess.getNodeAccess().getInhAssignment_3_1(), "rule__Node__InhAssignment_3_1");
					put(grammarAccess.getNodeAccess().getInhAssignment_3_2_1(), "rule__Node__InhAssignment_3_2_1");
					put(grammarAccess.getNodeAccess().getPropertiesAssignment_4_1_0(), "rule__Node__PropertiesAssignment_4_1_0");
					put(grammarAccess.getNodeAccess().getPropertiesAssignment_4_1_1_1(), "rule__Node__PropertiesAssignment_4_1_1_1");
					put(grammarAccess.getNodeSimpleAccess().getIdAssignment_0(), "rule__NodeSimple__IdAssignment_0");
					put(grammarAccess.getNodeSimpleAccess().getTypeAssignment_2(), "rule__NodeSimple__TypeAssignment_2");
					put(grammarAccess.getPropertyAccess().getIdAssignment_0_0(), "rule__Property__IdAssignment_0_0");
					put(grammarAccess.getPropertyAccess().getTgDataTypeAssignment_0_2(), "rule__Property__TgDataTypeAssignment_0_2");
					put(grammarAccess.getPropertyAccess().getIdAssignment_1_0(), "rule__Property__IdAssignment_1_0");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_1_2(), "rule__Property__TypeAssignment_1_2");
					put(grammarAccess.getPropertyAccess().getTgValueAssignment_1_4(), "rule__Property__TgValueAssignment_1_4");
					put(grammarAccess.getPropertyAccess().getIdAssignment_2_0(), "rule__Property__IdAssignment_2_0");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_2_2(), "rule__Property__TypeAssignment_2_2");
					put(grammarAccess.getPropertyAccess().getTgNodeAssignment_2_4(), "rule__Property__TgNodeAssignment_2_4");
					put(grammarAccess.getAttributeValueAccess().getValueAssignment_0(), "rule__AttributeValue__ValueAssignment_0");
					put(grammarAccess.getAttributeValueAccess().getVariableIdAssignment_1(), "rule__AttributeValue__VariableIdAssignment_1");
					put(grammarAccess.getDpfIdAccess().getNameAssignment_0(), "rule__DpfId__NameAssignment_0");
					put(grammarAccess.getDpfIdAccess().getIdAssignment_1_1(), "rule__DpfId__IdAssignment_1_1");
					put(grammarAccess.getRIdAccess().getNumsAssignment_0(), "rule__RId__NumsAssignment_0");
					put(grammarAccess.getRIdAccess().getNumsAssignment_1_1(), "rule__RId__NumsAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			no.hib.dpf.text.ui.contentassist.antlr.internal.InternalDPFTextParser typedParser = (no.hib.dpf.text.ui.contentassist.antlr.internal.InternalDPFTextParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DPFTextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DPFTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
